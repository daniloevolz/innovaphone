<!DOCTYPE html>
<html>
<head>
    <meta charset='utf-8' />
    <link rel="shortcut icon" href="favicon.ico" type="image/x-icon">
    <link rel="icon" href="favicon.ico" type="image/x-icon">
    <meta name='viewport' content='width=device-width, initial-scale=1.0' />
    <title>DWC Agenda Online</title>
    <!--<script src='https://code.jquery.com/ui/1.12.1/jquery-ui.min.js'></script>-->

    <link href='fullcalendar.min.css' rel='stylesheet' />
    <link href='https://cdnjs.cloudflare.com/ajax/libs/fullcalendar/3.10.2/fullcalendar.print.min.css' rel='stylesheet' media='print' />
    <script src='https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.24.0/moment.min.js'></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/fullcalendar/3.10.2/locale/pt-br.js'></script>
    <script src='https://code.jquery.com/jquery-3.5.1.min.js'></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/fullcalendar/3.10.2/fullcalendar.min.js'></script>
    <style>
        body {
            margin: 10px 10px;
            padding: 0;
            font-family: "Lucida Grande",Helvetica,Arial,Verdana,sans-serif;
            font-size: 14px;
            background-color: white;
        }
        #calendar {
            max-width: 900px;
            margin: 0 auto;
        }
        /* MODAL SEU NOME */
        .mainModalName {
            display: block;
            background-color: white;
            position: fixed;
            left: 15%;
            top: 1%;
            z-index: 1000;
            width: 70%;
            height: 70%;
            border-radius: 20px;
            box-shadow: 0.5em 0.5em 1em 0.5em rgba(0,0,0,0.5);
}
            .divSpan{
                width: 100%;
                /* background-color: yellow; */
            }
            .spanX{
                float: right;
                padding-right: 25px;
                margin-top: 10px;
                cursor: pointer;
                font-size: 15px;
            }
            .data-person{
                text-align: center;
                /* display: flex; */
                font-family: 'Arial';
            }
            .identify{
                font-size: 12px;
            }
            .iptName{
                height: 25px;
                width: 65%;
                border: 2px solid #02163f;
            }
            .btnSendName{
                height: 30px;
                width: 30%;
                background-color: #02163f;
                border: 0;
                color: white;
                font-weight: bold;
                border-radius: 25px;
            }
    </style>
    <script>
        var selectstart ;
        var selectend;
        var dataTime_start;
        var dataTime_end;
        var dataavailability;
        var dataschedules;
        var timeStart_schedules;
        var timeEnd_schedules;
        var dayName;
        var url = document.URL;
        var penultimateSlashIndex = url.lastIndexOf("/", url.lastIndexOf("/") - 1);
        var url = url.substring(0, penultimateSlashIndex);
        var timeZoneMyApps;
        var clientTimeZoneOffset = new Date().getTimezoneOffset();
        var clientTimeZone = formatTimezoneOffset(clientTimeZoneOffset);
        var timeZoneShort = clientTimeZone.split(':')[0]
        var differenceInHours = 0;

        var language = navigator.language || navigator.userLanguage;

        try {
            language = language.split("-")[0]
        }
        catch (e) {

        }

        var WecomDwcschedulerTexts = [{
            pt: {
                labelSometingWrong: "Algo saiu errado: ",
                labelParcialAvailable: "Poucos Horários",
                labelAvailable: "Disponível",
                labelUnavailable: "Indisponível",
                labelSelectUnavailableTime: "Horário indisponível \n Por favor selecione outro!",
                labelSelesctDateUnavailable: "Dia indisponível \n Por favor selecione outro!",
                labelInformName: "Digite seu nome e e-mail",
                placeholderName: "Seu nome",
                labelName: "Nome",
                labelEmail: "E-mail",
                placeholderEmail: "Seu e-mail",
                btnSend: "Enviar",
                labelInformNameToContinue: "Se identifique para continuar",
                today: 'Hoje',
                month: 'Mês',
                week: 'Semana',
                day: 'Dia'
            },
            es: {
                labelSometingWrong: "Algo salió mal: ",
                labelParcialAvailable: "Pocos Horarios Disponibles",
                labelAvailable: "Disponible",
                labelUnavailable: "No disponible",
                labelSelectUnavailableTime: "Hora no disponible \n ¡Por favor seleccione otra!",
                labelSelesctDateUnavailable: "Día no disponible \n ¡Por favor seleccione otro!",
                labelInformName: "Ingrese su nombre y correo electrónico",
                placeholderName: "Su nombre",
                labelName: "Nombre",
                labelEmail: "Correo electrónico",
                placeholderEmail: "Su correo electrónico",
                btnSend: "Enviar",
                labelInformNameToContinue: "Identifícate para continuar",
                today: 'Hoy',
                month: 'Mes',
                week: 'Semana',
                day: 'Día'
            },
            en: {
                labelSelectUnavailableTime: "Time unavailable \n Please select another!",
                labelSelesctDateUnavailable: "Day unavailable \n Please select another!",
                labelInformNameToContinue: "Inform all data to continue",
                labelSometingWrong: "Someting wrong: ",
                labelParcialAvailable: "Parcial Available",
                labelAvailable: "Available",
                labelUnavailable: "Unavailable",
                labelInformName: "Fill your name ans email",
                placeholderName: "Your name",
                labelName: "Name",
                labelEmail: "Email",
                placeholderEmail: "Your email",
                btnSend: "Send",
                today: 'Today',
                month: 'Month',
                week: 'Week',
                day: 'Day' 
            },
            fr: {
                labelSometingWrong: "Quelque chose s'est mal passé : ",
                labelParcialAvailable: "Quelques heures disponibles",
                labelAvailable: "Disponible",
                labelUnavailable: "Indisponible",
                labelSelectUnavailableTime: "Horaire indisponible \n Veuillez sélectionner un autre !",
                labelSelesctDateUnavailable: "Jour indisponible \n Veuillez sélectionner un autre !",
                labelInformName: "Entrez votre nom et votre e-mail",
                placeholderName: "Votre nom",
                labelName: "Nom",
                labelEmail: "E-mail",
                placeholderEmail: "Votre e-mail",
                btnSend: "Envoyer",
                labelInformNameToContinue: "Identifiez-vous pour continuer",
                today: 'Aujourd\'hui',
                month: 'Mois',
                week: 'Semaine',
                day: 'Jour'
            },
            de: {
                labelSometingWrong: "Etwas ist schief gelaufen: ",
                labelParcialAvailable: "Wenige Termine verfügbar",
                labelAvailable: "Verfügbar",
                labelUnavailable: "Nicht verfügbar",
                labelSelectUnavailableTime: "Nicht verfügbarer Zeitplan \n Bitte wählen Sie einen anderen!",
                labelSelesctDateUnavailable: "Nicht verfügbarer Tag \n Bitte wählen Sie einen anderen!",
                labelInformName: "Geben Sie Ihren Namen und Ihre E-Mail-Adresse ein",
                placeholderName: "Ihr Name",
                labelName: "Name",
                labelEmail: "E-Mail",
                placeholderEmail: "Ihre E-Mail-Adresse",
                btnSend: "Senden",
                labelInformNameToContinue: "Identifizieren Sie sich, um fortzufahren",
                today: 'Heute',
                month: 'Monat',
                week: 'Woche',
                day: 'Tag'
            }

        }]

        $(document).ready(function () {
            $.fullCalendar.locale(navigator.language);
            var id = $.urlParam('id');
            fetch(url+'/get-agenda?id=' + id, {
                method: 'GET',
                headers: {}
            }).then(function (response) {
                // Processa a resposta do servidor
                if (response.status == 200) {

                    response.text().then(function (text) {
                        var obj = JSON.parse(String(text));

                        console.log("get-agenda result=" + JSON.stringify(obj))
                        var first_start = "2999-01-01T01:00";
                        var last_end = "2000-12-30T23:00";
                        dataavailability = JSON.parse(obj.dataavailability);
                        //const originalDataAvailability = JSON.parse(obj.dataavailability);
                        //dataavailability = expandAvailabilityDates(originalDataAvailability);
                        dataschedules = JSON.parse(obj.dataschedules);
                        timeZoneMyApps = obj.timeZoneMyApps
                        // var dataTime_start;
                        // var dataTime_end;

                        if(dataavailability[0])    dataTime_start = dataavailability[0].time_start 
                        
                        if(dataavailability[0])    dataTime_end = dataavailability[0].time_end

                        if(dataschedules[0])       timeStart_schedules = dataschedules[0].time_start 
                        
                        if(dataschedules[0])       timeEnd_schedules = dataschedules[0].time_end
                        
                        console.log("Data Availability: " + JSON.stringify(dataavailability));
                        console.log("Data Start \n" + dataTime_start)
                        console.log("Data End \n" + dataTime_end)
                        console.log("TimeZoneMyApps \n" + timeZoneMyApps)
                        
                        console.log("Data Schedules:" + JSON.stringify(dataschedules));
                        console.log("Time Start \n" + timeStart_schedules);
                        console.log("Time End \n" + timeEnd_schedules);
                
                        UpdateAvailability(dataTime_start,dataTime_end,dataavailability, dataschedules);
                        MakeSubtitleDiv();
                        
                    });
                } 
                // fim da resposta STATUS 200
                else {
                    response.text().then(function (text) {
                        window.alert(WecomDwcschedulerTexts[0][language]['labelSometingWrong'] + "\n" + JSON.stringify(text));
                    });
                }
            }); // final .then (response)

           $('#calendar').fullCalendar({

               location: navigator.language,
                header: {
                    left: 'today',
                   center: 'title , month,agendaDay', //agendaWeek,
                    right: 'prev,next'
               },
               buttonText: {
                   today: WecomDwcschedulerTexts[0][language]['today'],
                   month: WecomDwcschedulerTexts[0][language]['month'],
                   week: WecomDwcschedulerTexts[0][language]['week'],
                   day: WecomDwcschedulerTexts[0][language]['day']
               },
                defaultView: 'month',
                slotDuration: '01:00:00', 
                minTime: '00:00:00',
                maxTime: '24:00:00',
                selectable: true,
                selectLongPressDelay: 0,

                selectHelper: true,
                select: function (start, end, jsEvent, view) {
                    selectstart = start.format('YYYY-MM-DD[T]HH:mm:ss');
                    selectend = end.format('YYYY-MM-DD[T]HH:mm:ss');
                    
                    if (view.name === 'month') {
                        console.log("View: Month");
                        var clickedElement = jsEvent.target
                        
                        console.log(" Elemento clicado " + clickedElement);
                        var clickedDate = start.format('YYYY-MM-DD');
                        console.log("Data do elemento clicado:", clickedDate);
                        var teste = false;
                        //if(clientTimeZone != timeZoneMyApps){
                        //        differenceInHours = calculateTimeZoneDifference(clientTimeZone, timeZoneMyApps);
                        //}
                        dataavailability.forEach(function(dates){
                            var datastart = moment(ajustarHora(dates.time_start, timeZoneShort))
                            var dataend = moment(ajustarHora(dates.time_end, timeZoneShort))
                            // Adicionando a diferença de horas às datas de início e fim
                            //datastart.add(parseInt(timeZoneShort), 'hours');
                            //dataend.add(parseInt(timeZoneShort), 'hours');

                            // Formatando as datas novamente, se necessário
                            datastart = datastart.format('YYYY-MM-DD');
                            dataend = dataend.format('YYYY-MM-DD');

                            if (clickedDate >= datastart && clickedDate <= dataend ) {
                                    console.log("Elemento clicado está disponível");
                                    $('#calendar').fullCalendar('changeView', 'agendaDay');
                                    $('#calendar').fullCalendar('gotoDate', start);
                                    teste = true;      
                            } 
                        })
                        if (!teste) window.alert(WecomDwcschedulerTexts[0][language]['labelSelesctDateUnavailable']);
                        $('#calendar').fullCalendar('unselect'); 
                    }
                    else if (view.name === 'agendaWeek') {
                        console.log("View: " + "Week");

                        var clickedElement = jsEvent.target
                        console.log(" Elemento clicado " + clickedElement);
                        var clickedDate = start.format('YYYY-MM-DD');
                        console.log("Data do elemento clicado:", clickedDate);
                        var teste = false;
                        if(dataavailability.length>0){
                            dataavailability.forEach(function(dates){
                                var datastart = moment(dates.time_start).format('YYYY-MM-DD');
                                var dataend = moment(dates.time_end).format('YYYY-MM-DD');
                                if (clickedDate >= datastart && clickedDate <= dataend ) {
                                    console.log("Elemento clicado está disponível");
                                    //document.getElementById("MyModal").style.display = 'block';
                                    //document.getElementById("iptName").value = '';
                                    //document.getElementById("iptEmail").value = '';

                                    $('#calendar').fullCalendar('unselect');
                                    teste = true;    
                                } 
                            })
                            if (!teste) window.alert(WecomDwcschedulerTexts[0][language]['labelSelesctDateUnavailable']);
                        }
                    } 
                    else {
                        ///TESTE DANILO
                        var valid = false;
                        //if(clientTimeZone != timeZoneMyApps){
                        //        differenceInHours = calculateTimeZoneDifference(clientTimeZone, timeZoneMyApps);
                        //}
                        if(dataavailability.length>0){
                            dataavailability.forEach(function (dates) {
                                var datastart = moment(ajustarHora(dates.time_start,timeZoneShort), moment.ISO_8601)
                                var dataend = moment(ajustarHora(dates.time_end, timeZoneShort), moment.ISO_8601)
                                
                                // Formatando as datas novamente, se necessário
                                datastart = datastart.format('YYYY-MM-DDTHH:mm:ss');
                                dataend = dataend.format('YYYY-MM-DDTHH:mm:ss');
                                console.log("Disponibilidade: \n" +datastart + "\n" + dataend);
                                // Obtém os valores do ano, mês e ano
                                var year = moment(start).format('YYYY');
                                var month = moment(start).format('MM');
                                var day = moment(start).format('DD');
                                // Obtém os valores do hora, minuto e segundos
                                var hour = moment(start).format('HH');
                                var minute = moment(start).format('mm');
                                var second = moment(start).format('ss');
                                var date = year + "-" + month + "-" + day + "T" + hour + ":" + minute + ":" + second;
                                // Cria o objeto de data
                                var dateView = moment(date, moment.ISO_8601).format('YYYY-MM-DDTHH:mm:ss');

                                console.log(dateView);

                                if (dateView >= datastart && dateView <= dataend) {
                                    valid = true;
                                }
                            });
                        }
                        if(dataschedules.length>0){
                            dataschedules.forEach(function (dates) {
                                var datastart = moment(ajustarHora(dates.time_start, timeZoneShort), moment.ISO_8601)
                                // Adicionando a diferença de horas às datas de início e fim
                                //datastart.add(parseInt(timeZoneShort), 'hours');
                                datastart = datastart.format('YYYY-MM-DDTHH:mm:ss');
                                var dataend = moment(ajustarHora(dates.time_end, timeZoneShort), moment.ISO_8601)
                                // Adicionando a diferença de horas às datas de início e fim
                                //dataend.add(parseInt(timeZoneShort), 'hours');
                                dataend = dataend.format('YYYY-MM-DDTHH:mm:ss');

                                console.log("Agendamento: \n"+datastart + "\n" + dataend);
                                // Obtém os valores do ano, mês e ano
                                var year = moment(start).format('YYYY');
                                var month = moment(start).format('MM');
                                var day = moment(start).format('DD');
                                // Obtém os valores do hora, minuto e segundos
                                var hour = moment(start).format('HH');
                                var minute = moment(start).format('mm');
                                var second = moment(start).format('ss');
                                var date = year + "-" + month + "-" + day + "T" + hour + ":" + minute + ":" + second;
                                // Cria o objeto de data
                                var dateView = moment(date, moment.ISO_8601).format('YYYY-MM-DDTHH:mm:ss');

                                console.log(dateView);

                                if (dateView == datastart) {
                                    valid = false;
                                }
                            });
                        }

                        var year = moment(start).format('YYYY');
                        var month = moment(start).format('MM');
                        var day = moment(start).format('DD');
                        // Obtém os valores do hora, minuto e segundos
                        var hour = moment(start).format('HH');
                        var minute = moment(start).format('mm');
                        var second = moment(start).format('ss');
                        var date = year + "-" + month + "-" + day + "T" + hour + ":" + minute + ":" + second;
                        // Cria o objeto de data
                        var datastart = moment(date, moment.ISO_8601).format('YYYY-MM-DDTHH:mm:ss');

                        var now = moment().format("YYYY-MM-DDTHH:mm:ss");
                        if (datastart < now) {
                            console.warn(WecomDwcschedulerTexts[0][language]['labelSelectUnavailableTime']);
                            valid = false;
                        }

                        if (valid) {
                            dayName = view.title;
                            var clickedTime = start.format('HH:mm:ss');
                            console.log("Dia do elemento clicado:" + dayName)
                            console.log("Hora do elemento clicado:", clickedTime);
                            makeModal(dayName, clickedTime);
                            $('#calendar').fullCalendar('unselect');

                        } else {
                            window.alert(WecomDwcschedulerTexts[0][language]['labelSelectUnavailableTime']);
                            $('#calendar').fullCalendar('unselect');
                        }
                        ///
                    }
                },
                editable: false,
                eventLimit: true,
                events: [],
                eventRender: function (event, element) {},

                viewRender: function(view, element) {
                    
                    if (view.name === 'month') {
                        setTimeout(function() {
                            UpdateAvailability(dataTime_start, dataTime_end, dataavailability, dataschedules)
                        }, 100);
                        console.log('View: Modo mês');
                    } 
                    else if(view.name === 'agendaWeek') {
                        console.log("View Modo Semana")
                    }
                    else{
                        var startDate = view.intervalStart;
                        var day = startDate.date(); // Obtém o dia do mês
                        var month = startDate.month() + 1; // Obtém o mês (adiciona 1 porque o mês é base zero em Moment.js)
                        var year = startDate.year(); // Obtém o ano
                        console.log("Dia atual: " + day);
                        console.log("Mês atual: " + month);
                        console.log("Ano atual: " + year);

                        setTimeout(function() {
                           UpdateDayAvailability(dataTime_start, dataTime_end, dataavailability, dataschedules, day, month, year)
                        }, 100);
                    }
    },
            });
        });
        // Função para obter o valor de um parâmetro de URL
        $.urlParam = function (name) {
            var results = new RegExp('[\\?&]' + name + '=([^&#]*)').exec(window.location.href);
            if (!results) {
                return null;
            }
            return decodeURIComponent(results[1].replace(/\+/g, ' '));
        }
        function expandAvailabilityDates(newAvailability) {
            const expanded = [];

            newAvailability.forEach(avail => {
                const dayOfWeek = parseInt(avail.day); // 0 = Domingo, 1 = Segunda...
                const hourStart = parseInt(avail.hour_start);
                const minStart = parseInt(avail.minute_start);
                const hourEnd = parseInt(avail.hour_end);
                const minEnd = parseInt(avail.minute_end);

                // Se não houver date_start ou date_end, usar ano atual como fallback
                const startDate = avail.date_start ? moment(avail.date_start) : moment().startOf('year');
                const endDate = avail.date_end ? moment(avail.date_end) : moment().endOf('year');

                let current = moment(startDate);

                while (current.isSameOrBefore(endDate, 'day')) {
                    if (current.day() === dayOfWeek) {
                        const timeStart = current.clone().hour(hourStart).minute(minStart).second(0);
                        const timeEnd = current.clone().hour(hourEnd).minute(minEnd).second(0);

                        expanded.push({
                            time_start: timeStart.format("YYYY-MM-DDTHH:mm:ss"),
                            time_end: timeEnd.format("YYYY-MM-DDTHH:mm:ss")
                        });
                    }
                    current.add(1, 'day');
                }
            });

            return expanded;
        }
        
        function makeModal(day,time){
                // console.log("START " + start + "\n" + "END " + end)
            //    document.getElementById("MyModal").style.display = 'block';
            //    document.getElementById("iptName").value = '';
            //    document.getElementById("iptEmail").value = '';
            //document.getElementById("DateToday").innerHTML = day + " " + time

            // Cria os elementos HTML

            var elementoParaRemover = document.getElementById("MyModal");
            if (elementoParaRemover) {
                document.body.removeChild(elementoParaRemover);
            } else {
                console.log("O elemento não foi encontrado.");
            }

            var divMainModalName = document.createElement("div");
            divMainModalName.className = "mainModalName";
            divMainModalName.id = "MyModal";

            var divDivSpan = document.createElement("div");
            divDivSpan.className = "divSpan";
            var spanSpanX = document.createElement("span");
            spanSpanX.className = "spanX";
            spanSpanX.id = "spanX";
            spanSpanX.textContent = "✕";
            divDivSpan.appendChild(spanSpanX);
            divMainModalName.appendChild(divDivSpan);

            var br1 = document.createElement("br");
            divMainModalName.appendChild(br1);

            var divDataPerson = document.createElement("div");
            divDataPerson.className = "data-person";
            var h3DateToday = document.createElement("h3");
            h3DateToday.id = "DateToday";
            h3DateToday.innerHTML = day + " " + time
            divDataPerson.appendChild(h3DateToday);
            var h2NameEmail = document.createElement("h2");
            h2NameEmail.textContent = WecomDwcschedulerTexts[0][language]["labelInformName"];
            h2NameEmail.style.marginBlockEnd = "0";
            divDataPerson.appendChild(h2NameEmail);
            var pIdentify = document.createElement("p");
            pIdentify.className = "identify";
            pIdentify.textContent = WecomDwcschedulerTexts[0][language]["labelInformNameToContinue"];
            divDataPerson.appendChild(pIdentify);
            var pEmpty = document.createElement("p");
            divDataPerson.appendChild(pEmpty);
            var pNome = document.createElement("p");
            pNome.textContent = WecomDwcschedulerTexts[0][language]["labelName"];
            divDataPerson.appendChild(pNome);
            var inputNome = document.createElement("input");
            inputNome.type = "text";
            inputNome.className = "iptName";
            inputNome.placeholder = WecomDwcschedulerTexts[0][language]["placeholderName"];
            inputNome.id = "iptName";
            divDataPerson.appendChild(inputNome);
            var br2 = document.createElement("br");
            divDataPerson.appendChild(br2);
            var pEmail = document.createElement("p");
            pEmail.textContent = WecomDwcschedulerTexts[0][language]["labelEmail"];
            divDataPerson.appendChild(pEmail);
            var inputEmail = document.createElement("input");
            inputEmail.type = "text";
            inputEmail.className = "iptName";
            inputEmail.placeholder = WecomDwcschedulerTexts[0][language]["placeholderEmail"];
            inputEmail.id = "iptEmail";
            divDataPerson.appendChild(inputEmail);
            var br3 = document.createElement("br");
            divDataPerson.appendChild(br3);
            var br4 = document.createElement("br");
            divDataPerson.appendChild(br4);
            var buttonEnviar = document.createElement("button");
            buttonEnviar.className = "btnSendName";
            buttonEnviar.id = "btnSendName";
            buttonEnviar.textContent = WecomDwcschedulerTexts[0][language]["btnSend"];
            divDataPerson.appendChild(buttonEnviar);
            divMainModalName.appendChild(divDataPerson);

            // Adiciona os elementos ao corpo da página
            document.body.appendChild(divMainModalName);

            document.getElementById("btnSendName").addEventListener("click", function () {
                var name = document.getElementById("iptName").value;
                var email = document.getElementById("iptEmail").value;
                console.log("Nome enviado: " + name + "\n" + "E-mail Enviado: " + email)
                var id = $.urlParam('id');
                sendAgenda(id, name, email, selectstart, selectend);

            })
        }
        
        function MakeSubtitleDiv(){
                            var subtitleDiv = document.createElement('div');
                            subtitleDiv.className = 'calendar-subtitle';

                            subtitleDiv.innerHTML = `
                            <div class="subtitle-divs" style = "width: 32%; justify-content: left">
                                <span style="width: 12px; height: 12px; background: #9DDBBD;"></span>
                                <span>`+ WecomDwcschedulerTexts[0][language]['labelAvailable']+`</span>
                            </div>
                            <div class="subtitle-divs" style = "width: 32%; justify-content: center">
                                <span style="width: 12px; height: 12px; background: #f89598;"></span>
                                <span>`+ WecomDwcschedulerTexts[0][language]['labelUnavailable'] +`</span>
                            </div>
                            <div class="subtitle-divs" style = "width: 32%; justify-content: right">
                                <span style="width: 12px; height: 12px; background: #FFEE92;"></span>
                                <span>`+ WecomDwcschedulerTexts[0][language]['labelParcialAvailable'] +`</span>
                            </div>
                            `;

                        $('#calendar').append(subtitleDiv);
        }

        function oldUpdateAvailability(datastart, dataend, availability, schedules){
            var tds = document.querySelectorAll('.fc-day','.fc-highlight');
            if (availability.length === 0) {
                tds.forEach(function(td) {
                    td.classList.add('unavailable');  
                });
            } 
            else {
                //if(clientTimeZone != timeZoneMyApps){
                //    differenceInHours = calculateTimeZoneDifference(clientTimeZone, timeZoneMyApps);
                //}
                availability.forEach(function(dates){

                    var datastart = moment(ajustarHora(dates.time_start, timeZoneShort))
                    var dataend = moment(ajustarHora(dates.time_end, timeZoneShort))
                    

                    // Formatando as datas novamente, se necessário
                    datastart = datastart.format('YYYY-MM-DD');
                    dataend = dataend.format('YYYY-MM-DD');

                    tds.forEach(function(td) {
                        var dataDate = moment(td.getAttribute('data-date')).format('YYYY-MM-DD');
                        var hourAvail = countTotalHoursAvailability(String(dataDate),availability);
                        var hourBusy = countTotalHoursBusy(String(dataDate),schedules);
                        hourAvail -=hourBusy;
                        console.log("Horas disponivies " + hourAvail+ " em " + String(dataDate))
                        if (dataDate >= datastart && dataDate <= dataend) {
                            if(hourAvail<=6){
                                td.classList.remove('unavailable');
                                td.classList.add('parcialavailable');
                            }else{
                                td.classList.remove('unavailable');
                                td.classList.add('available');
                            }
                            
                        } else {
                            td.classList.add('unavailable');                 
                        }
                    });
                })
            }
            console.log("UpdateAvailability Result Success");                             
        }

        function UpdateAvailability(datastart, dataend, availability, schedules) {
            var tds = document.querySelectorAll('.fc-day');
            if (availability.length === 0) {
                tds.forEach(function (td) {
                    td.classList.add('unavailable');
                });
            } else {
                tds.forEach(function (td) {
                    const dataDateStr = td.getAttribute('data-date');
                    const dataDate = moment(dataDateStr);
                    const dayOfWeek = dataDate.day(); // 0 = domingo, 6 = sábado

                    // Total de horas disponíveis neste dia
                    let totalAvailable = 0;

                    availability.forEach(function (obj) {
                        const objDay = parseInt(obj.day);

                        const dateStart = obj.date_start ? moment(obj.date_start) : null;
                        const dateEnd = obj.date_end ? moment(obj.date_end) : null;

                        const isInRange =
                            (!dateStart || dataDate.isSameOrAfter(dateStart, 'day')) &&
                            (!dateEnd || dataDate.isSameOrBefore(dateEnd, 'day'));

                        if (dayOfWeek === objDay && isInRange) {
                            const start = moment(dataDate).hour(parseInt(obj.hour_start)).minute(parseInt(obj.minute_start));
                            const end = moment(dataDate).hour(parseInt(obj.hour_end)).minute(parseInt(obj.minute_end));
                            const diff = end.diff(start, 'minutes') / 60;
                            totalAvailable += diff;
                        }
                    });

                    // Subtrair os horários ocupados (schedules)
                    let totalBusy = 0;
                    schedules.forEach(function (obj) {
                        const scheduleStart = moment(ajustarHora(obj.time_start, timeZoneShort));
                        if (scheduleStart.isSame(dataDate, 'day')) {
                            totalBusy += 1; // cada agendamento ocupa 1 hora (ou ajuste se for diferente)
                        }
                    });

                    const freeHours = totalAvailable - totalBusy;

                    // Aplica a classe
                    td.classList.remove('available', 'parcialavailable', 'unavailable');
                    if (freeHours > 6) {
                        td.classList.add('available');
                    } else if (freeHours > 0) {
                        td.classList.add('parcialavailable');
                    } else {
                        td.classList.add('unavailable');
                    }
                });
            }

            console.log("UpdateAvailability (optimized) finalizado");
        }


        function oldcountTotalHoursAvailability(dataString, array) {
            var targetDate = moment(dataString);
            var totalHours = 0;
            
            array.forEach(function(obj) {
                var start = moment(obj.time_start);
                var end = moment(obj.time_end);
                
                if (targetDate.isSame(start, 'day')) {
                    if (targetDate.isSame(end, 'day')) {
                        totalHours += end.diff(start, 'hours');
                    } else {
                        var endOfDay = moment(targetDate).endOf('day');
                        totalHours += endOfDay.diff(start, 'hours');
                    }
                } else if (targetDate.isAfter(start, 'day') && targetDate.isBefore(end, 'day')) {
                    //var startOfDay = moment(targetDate).startOf('day');
                    //totalHours += end.diff(startOfDay, 'hours');
                    totalHours = 24;
                } else if (targetDate.isSame(end, 'day')) {
                var startOfDay = moment(targetDate).startOf('day');
                totalHours += end.diff(startOfDay, 'hours');
                }
            });
            
            return totalHours;
        }

        function countTotalHoursAvailability(dataString, array) {
            const targetDate = moment(dataString);
            const targetDayOfWeek = targetDate.day(); // 0 (domingo) a 6 (sábado)
            let totalHours = 0;

            array.forEach(function (obj) {
                // Verifica se a data está dentro do range de date_start e date_end (ou ignora se não definidos)
                const dateStart = obj.date_start ? moment(obj.date_start) : null;
                const dateEnd = obj.date_end ? moment(obj.date_end) : null;

                const isWithinRange =
                    (!dateStart || targetDate.isSameOrAfter(dateStart, 'day')) &&
                    (!dateEnd || targetDate.isSameOrBefore(dateEnd, 'day'));

                if (parseInt(obj.day) === targetDayOfWeek && isWithinRange) {
                    const startHour = parseInt(obj.hour_start);
                    const startMinute = parseInt(obj.minute_start);
                    const endHour = parseInt(obj.hour_end);
                    const endMinute = parseInt(obj.minute_end);

                    const start = moment(targetDate).hour(startHour).minute(startMinute);
                    const end = moment(targetDate).hour(endHour).minute(endMinute);

                    const diffHours = end.diff(start, 'minutes') / 60;
                    totalHours += diffHours;
                }
            });

            return totalHours;
        }


        function countTotalHoursBusy(dataString, array) {
            var targetDate = moment(dataString);
            var count = 0;
            
            array.forEach(function(obj) {
                var start = moment(obj.time_start);
                
                if (targetDate.isSame(start, 'day')) {
                count++;
                }
            });
            
            return count;
        }
                    
        function oldUpdateDayAvailability(datastart,dataend,availability, schedules,day, month, year){
            // var tds = document.querySelectorAll('.fc-widget-content');
            var trs = document.querySelectorAll('.fc-slats tr');
            if (availability.length === 0) {
                trs.forEach(function(tr) {
                    console.log("Availability: 0");
                    tr.classList.remove('available');
                    tr.classList.add('unavailable');  
                });
            } 
            else {
                
                //if(clientTimeZone != timeZoneMyApps){
                //    differenceInHours = calculateTimeZoneDifference(clientTimeZone, timeZoneMyApps);
                //}

                //Deixa tudo indisponível
                trs.forEach(function (tr) {
                    tr.classList.remove('available');
                    tr.classList.add('unavailable');
                });
                console.log("UpdateDayAvailability");

                availability.forEach(function(dates) {
                    var datastart = moment(ajustarHora(dates.time_start, timeZoneShort), moment.ISO_8601).format('YYYY-MM-DDTHH:mm:ss');
                    var dataend = moment(ajustarHora(dates.time_end, timeZoneShort), moment.ISO_8601).format('YYYY-MM-DDTHH:mm:ss');

                    // Adicionando a diferença de horas às datas de início e fim
                    //datastart.add(parseInt(timeZoneShort), 'hours');
                    //dataend.add(parseInt(timeZoneShort), 'hours');

                    // Formatando as datas novamente, se necessário
                    //datastart = datastart.format('YYYY-MM-DDTHH:mm:ss');
                    //dataend = dataend.format('YYYY-MM-DDTHH:mm:ss')

                    trs.forEach(function(tr) {
                        
                        var dataTime = moment(tr.getAttribute('data-time'), 'HH:mm:ss');
                        // Obtém os valores do dia, mês e ano
                        var hour = moment(dataTime).format('HH');
                        var minute = moment(dataTime).format('mm');
                        var second = moment(dataTime).format('ss');
                        var date = year + "-" + pad(month,2) + "-" + pad(day,2) + "T" + pad(hour,2) + ":" + minute + ":" + second;
                        // Cria o objeto de data
                        var dateView = moment(date, moment.ISO_8601).format('YYYY-MM-DDTHH:mm:ss');

                        //console.log(dateView);

                        if (dateView>=datastart && dateView<=dataend) {
                            tr.classList.remove('unavailable');
                            tr.classList.add('available');
                        }
                    });
                });
                console.log("UpdateDayAvailabilitySuccess");
                if(schedules.length >0){
                    schedules.forEach(function (dates) {
                        var datastart = moment(ajustarHora(dates.time_start, timeZoneShort), moment.ISO_8601).format('YYYY-MM-DDTHH:mm:ss');
                        // Adicionando a diferença de horas às datas de início e fim
                        //datastart.add(parseInt(timeZoneShort), 'hours');
                        //datastart = datastart.format('YYYY-MM-DDTHH:mm:ss');
                        
                        trs.forEach(function (tr) {
                            var dataTime = moment(tr.getAttribute('data-time'), 'HH:mm:ss');
                            var hour = moment(dataTime).format('HH');
                            var minute = moment(dataTime).format('mm');
                            var second = moment(dataTime).format('ss');
                            var date = year + "-" + pad(month, 2) + "-" + pad(day, 2) + "T" + pad(hour, 2) + ":" + minute + ":" + second;
                            // Cria o objeto de data
                            var dateView = moment(date, moment.ISO_8601).format('YYYY-MM-DDTHH:mm:ss');

                            if (dateView == datastart) {
                                tr.classList.remove('available');
                                tr.classList.add('unavailable');
                            }
                        });
                    });
                }
                console.log("UpdateDaySchedulesSuccess");         
            }
        }

        function UpdateDayAvailability(datastart, dataend, availability, schedules, day, month, year) {
            var trs = document.querySelectorAll('.fc-slats tr');

            // Define tudo como indisponível por padrão
            trs.forEach(function (tr) {
                tr.classList.remove('available');
                tr.classList.add('unavailable');
            });

            // Calcula o dia da semana da data atual
            const currentDate = moment(`${year}-${pad(month, 2)}-${pad(day, 2)}`, "YYYY-MM-DD");
            const currentDayOfWeek = currentDate.day(); // 0 (domingo) a 6 (sábado)

            // Marca as horas disponíveis com base no novo formato
            availability.forEach(function (obj) {
                const isSameDay = parseInt(obj.day) === currentDayOfWeek;

                const dateStart = obj.date_start ? moment(obj.date_start) : null;
                const dateEnd = obj.date_end ? moment(obj.date_end) : null;

                const inDateRange =
                    (!dateStart || currentDate.isSameOrAfter(dateStart, 'day')) &&
                    (!dateEnd || currentDate.isSameOrBefore(dateEnd, 'day'));

                if (isSameDay && inDateRange) {
                    const startHour = parseInt(obj.hour_start);
                    const startMin = parseInt(obj.minute_start);
                    const endHour = parseInt(obj.hour_end);
                    const endMin = parseInt(obj.minute_end);

                    trs.forEach(function (tr) {
                        const timeAttr = tr.getAttribute('data-time');
                        if (!timeAttr) return;

                        const time = moment(timeAttr, 'HH:mm:ss');
                        const slotHour = time.hour();
                        const slotMin = time.minute();

                        const slotTime = moment(currentDate).hour(slotHour).minute(slotMin);
                        const startTime = moment(currentDate).hour(startHour).minute(startMin);
                        const endTime = moment(currentDate).hour(endHour).minute(endMin);

                        if (slotTime.isSameOrAfter(startTime) && slotTime.isBefore(endTime)) {
                            tr.classList.remove('unavailable');
                            tr.classList.add('available');
                        }
                    });
                }
            });

            // Marcar horários ocupados (schedules)
            if (schedules.length > 0) {
                schedules.forEach(function (obj) {
                    const startTime = moment(ajustarHora(obj.time_start, timeZoneShort), moment.ISO_8601);

                    if (startTime.date() === day && startTime.month() + 1 === month && startTime.year() === year) {
                        const busyHour = startTime.hour();
                        const busyMin = startTime.minute();

                        trs.forEach(function (tr) {
                            const timeAttr = tr.getAttribute('data-time');
                            if (!timeAttr) return;

                            const slot = moment(timeAttr, 'HH:mm:ss');
                            if (slot.hour() === busyHour && slot.minute() === busyMin) {
                                tr.classList.remove('available');
                                tr.classList.add('unavailable');
                            }
                        });
                    }
                });
            }

            console.log("UpdateDayAvailability (optimized) finalizado");
        }


        function sendAgenda(id, name, email, start, end) {

            var elementoParaRemover = document.getElementById("MyModal");
            if (elementoParaRemover) {
                document.body.removeChild(elementoParaRemover);
            } else {
                console.log("O elemento não foi encontrado.");
            }
            
            console.log("EVENT DATA RECEBIDO:" + "\n" + "ID " + id + "\n" + "title(name) " + name + "\n" + "start " + start + "\n" + 
            "end " + end + "\n" + "email " + email)
                            if (name && email) {

                                var eventData;
                                eventData = {
                                    id: '',
                                    sip: id,
                                    name: name,
                                    email: email,
                                    date: '',
                                    time_start: moment(ajustarHoraParaUTC(start, timeZoneShort), moment.ISO_8601).format('YYYY-MM-DDTHH:mm:ss'),
                                    time_end: moment(ajustarHoraParaUTC(end, timeZoneShort), moment.ISO_8601).format('YYYY-MM-DDTHH:mm:ss'),
                                    language: language,
                                    timeZone: clientTimeZone
                                };
                                fetch(url+'/salvar-evento', {
                                    method: 'POST',
                                    headers: {
                                        'Content-Type': 'application/json'
                                    },
                                    body: JSON.stringify(eventData)
                                }).then(function (response) {
                                    // Processa a resposta do servidor
                                    if (response.status == 200) {

                                        response.text().then(function (text) {
                                            var obj = JSON.parse(String(text));
                                            switch (obj.status) {
                                                case 200:
                                                    // Obtém os valores do ano, mês e ano
                                                    var year = moment(start).format('YYYY');
                                                    var month = moment(start).format('MM');
                                                    var day = moment(start).format('DD');
                                                    eventData.id = obj.id;
                                                    dataschedules.push(eventData);
                                                    UpdateDayAvailability(dataTime_start, dataTime_end, dataavailability, dataschedules, day, month, year)
                                                    window.alert("\n" + obj.msg);
                                                    break;
                                                default:
                                                    window.alert(obj.msg);
                                                    break;
                                            }
                                        });
                                    } else {
                                        response.text().then(function (text) {
                                            window.alert(WecomDwcschedulerTexts[0][language]['labelSometingWrong']+"\n" + String(text));
                                        });
                                    }

                                });
                            }
        }

        function closeModal(event){
            if(event.target.id === "spanX"){
                var elementoParaRemover = document.getElementById("MyModal");
                if (elementoParaRemover) {
                    document.body.removeChild(elementoParaRemover);
                } else {
                    console.log("O elemento não foi encontrado.");
                }
            }
    }
        document.addEventListener('click', closeModal);

        function closeAgenda(){
                window.parent.postMessage('ocultarDiv', '*');
                console.log("MSG ENVIADA")
            }

            // Função para formatar o deslocamento do fuso horário em uma string 'HH:mm'
        function formatTimezoneOffset(offset) {
            var hours = Math.abs(Math.floor(offset / 60));
            var minutes = Math.abs(offset % 60);
            var sign = offset > 0 ? '-' : '+';
            return sign + pad(hours, 2) + ':' + pad(minutes, 2);
        }

        // Função para converter uma string de fuso horário em um número
        function convertTimeZoneToNumber(timeZone) {
            var sign = timeZone.charAt(0); // Obtém o sinal do fuso horário (+ ou -)
            var offset = parseInt(timeZone.slice(1)); // Obtém o deslocamento numérico do fuso horário
            return sign === '+' ? offset : -offset; // Retorna o número de horas com sinal correto
        }

        // Função para calcular a diferença entre dois fusos horários
        function calculateTimeZoneDifference(timeZoneClient, timeZoneMyApps) {
            var timeZone1Offset = convertTimeZoneToNumber(timeZoneClient);
            var timeZone2Offset = convertTimeZoneToNumber(timeZoneMyApps);
            return timeZone1Offset - timeZone2Offset; // Retorna a diferença entre os fusos horários
        }
        // Função auxiliar para adicionar zeros à esquerda para preencher a string
        function pad(num, size) {
            var s = num + "";
            while (s.length < size) s = "0" + s;
            return s;
                }


        // Exemplo de uso:
        //var dataOriginal = "2024-04-28T03:57";
        //var diferenca = "-03"; // ou "+03" para somar 3 horas
        function ajustarHora(dataString, diferenca) {
            // Converte a string de data para um objeto Date
            var data = new Date(dataString);

            // Extrai o valor da diferença de horas da string
            var diferencaHoras = parseInt(diferenca);

            // Verifica se a diferença é positiva ou negativa e adiciona ou subtrai horas
            if (diferencaHoras >= 0) {
                data.setHours(data.getHours() + diferencaHoras);
            } else {
                data.setHours(data.getHours() - Math.abs(diferencaHoras));
            }

            // Formata a nova data para o formato desejado (yyyy-mm-ddThh:mm)
            var ano = data.getFullYear();
            var mes = padZero(data.getMonth() + 1); // Adiciona 1 porque os meses são indexados a partir de 0
            var dia = padZero(data.getDate());
            var horas = padZero(data.getHours());
            var minutos = padZero(data.getMinutes());

            var novaDataString = ano + "-" + mes + "-" + dia + "T" + horas + ":" + minutos;

            // Formata a nova data para o formato desejado (yyyy-mm-ddThh:mm) EM UTC
            //var novaDataString = new Date(dataString).toISOString().slice(0, 16);

            return novaDataString;
        }
        function ajustarHoraParaUTC(dataString, diferenca) {
            // Converte a string de data para um objeto Date
            var data = new Date(dataString);

            // Extrai o valor da diferença de horas da string
            var diferencaHoras = parseInt(diferenca);

            // Verifica se a diferença é positiva ou negativa e adiciona ou subtrai horas
            if (diferencaHoras >= 0) {
                data.setHours(data.getHours() - diferencaHoras);
            } else {
                data.setHours(data.getHours() + Math.abs(diferencaHoras));
            }

            // Formata a nova data para o formato desejado (yyyy-mm-ddThh:mm)
            var ano = data.getFullYear();
            var mes = padZero(data.getMonth() + 1); // Adiciona 1 porque os meses são indexados a partir de 0
            var dia = padZero(data.getDate());
            var horas = padZero(data.getHours());
            var minutos = padZero(data.getMinutes());

            var novaDataString = ano + "-" + mes + "-" + dia + "T" + horas + ":" + minutos;

            // Formata a nova data para o formato desejado (yyyy-mm-ddThh:mm) EM UTC
            //var novaDataString = new Date(dataString).toISOString().slice(0, 16);

            return novaDataString;
        }

        function padZero(num) {
            return (num < 10 ? "0" : "") + num;
        }

    </script>
</head>
<body>
    <!--Calendário
    <div id='calendar'></div>
-->
    <div id="calendar-container">
        <button id="custom-button" onclick="closeAgenda()">X</button>
        <div id="calendar"></div>
      </div>
</body>
</html>