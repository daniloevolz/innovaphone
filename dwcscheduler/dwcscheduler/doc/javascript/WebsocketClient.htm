<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title>innovaphone SDK - WebsocketClient</title>
    <link rel="stylesheet" href="../../web1/doc/innovaphone.doc.css" type="text/css" />
    <link rel="stylesheet" href="../../web1/doc/vs.css">
    <script src="../../web1/doc/highlight.pack.js"></script>
    <script>hljs.initHighlightingOnLoad();</script>
</head>

<body>
    <h1>WebsocketClient</h1>
    <p>
        This document describes the WebsocketClient available in the JavaScript environment for app serivices.
    </p>

    <h2>Table of content</h2>
    <table>
        <tr>
            <td><b>Object</b></td>
            <td><b><a href="#WebsocketClient">WebsocketClient</a></b><br /></td>
        </tr>
        <tr>
            <td><b>Functions</b></td>
            <td>
                <a href="#connect">connect</a><br />
                <br />
            </td>
        </tr>
        <tr>
            <td><b>Object</b></td>
            <td>
                <b><a href="#WebsocketClientConnection">WebsocketClientConnection</a></b><br />
            </td>
        </tr>
        <tr>
            <td><b>Functions</b></td>
            <td>
                <a href="#onopen">onopen</a><br />
                <a href="#onerror">onerror</a><br />
                <a href="#onclose">onclose</a><br />
                <a href="#onmessage">onmessage</a><br />
                <a href="#send">send</a><br />
                <a href="#close">close</a><br />
                <a href="#setFlowControl">setFlowControl</a><br />
                <a href="#messageComplete">messageComplete</a><br />
                <br />
            </td>
        </tr>
    </table>

    <h2><a name="WebsocketClient">WebsocketClient</a></h2>

    <a name="connect"><div class="fnhead" style="margin-top:5px">connect</div></a>
    <dd>
        Creates a WebsocketClientConnection object. The actual connection is started asynchronously. So synchronous function calls on that object are handled before the connection is established.
        <h4>Parameters</h4>
        <table style="margin-left:-12px">
            <tr><td class="param">string <b>uri</b></td><td>An absolute ws: or wss: URI.</td></tr>
        </table>
        <h4>Return value</h4>
        <table style="margin-left:-12px">
            <tr><td class="param"><a href="#WebsocketClientConnection">WebsocketClientConnection</a></td><td>An object representing the websocket connection.</td></tr>
        </table>
    </dd>
    <dd>
        <pre><code class="JS">var websocket = WebsocketClient.connect("wss://pbx.example.com/PBX0/APPS/websocket");</code></pre>
    </dd>

    <h2><a name="WebsocketClientConnection">WebsocketClientConnection</a></h2>

    <a name="onopen"><div class="fnhead" style="margin-top:5px">onopen</div></a>
    <dd>
        Sets a callback function that is invoked when the connection is established.
        Optional.
        <h4>Parameters</h4>
        <table style="margin-left:-12px">
            <tr><td class="param">function <b>callback</b>(<a href="#WebsocketClientConnection">WebsocketClientConnection</a> connection)</td><td>A callback that will be called when the connection is established.</td></tr>
        </table>
        <h4>Return value</h4>
        <table style="margin-left:-12px">
            <tr><td class="param"><a href="#WebsocketClientConnection">WebsocketClientConnection</a></td><td>A reference to the object itself. Useful for method chaining.</td></tr>
        </table>
    </dd>
    <dd>
        <pre><code class="JS">websocket.onopen(function(conn) {
    log("connection is up");
});</code></pre>
    </dd>

    <a name="onclose"><div class="fnhead" style="margin-top:5px">onclose</div></a>
    <dd>
        Sets a callback function that is invoked when the connection is closed.
        Optional.
        <h4>Parameters</h4>
        <table style="margin-left:-12px">
            <tr><td class="param">function <b>callback</b>(<a href="#WebsocketClientConnection">WebsocketClientConnection</a> connection)</td><td>A callback that will be called when the connection is closed. After the callback the connection object is gone and can not be used anymore.</td></tr>
        </table>
        <h4>Return value</h4>
        <table style="margin-left:-12px">
            <tr><td class="param"><a href="#WebsocketClientConnection">WebsocketClientConnection</a></td><td>A reference to the object itself. Useful for method chaining.</td></tr>
        </table>
    </dd>
    <dd>
        <pre><code class="JS">websocket.onclose(function(conn) {
    log("connection closed");
});</code></pre>
    </dd>

    <a name="onclose"><div class="fnhead" style="margin-top:5px">onerror</div></a>
    <dd>
        Sets a callback function that is invoked when an error on the connection occurred.
        Optional.
        <h4>Parameters</h4>
        <table style="margin-left:-12px">
            <tr><td class="param">function <b>callback</b>(<a href="#WebsocketClientConnection">WebsocketClientConnection</a> connection)</td><td>A callback that will be called when the connection is closed. After the callback the connection object is gone and can not be used anymore.</td></tr>
        </table>
        <h4>Return value</h4>
        <table style="margin-left:-12px">
            <tr><td class="param"><a href="#WebsocketClientConnection">WebsocketClientConnection</a></td><td>A reference to the object itself. Useful for method chaining.</td></tr>
        </table>
    </dd>
    <dd>
        <pre><code class="JS">websocket.onerror(function(conn) {
    log("connection error");
});</code></pre>
    </dd>

    <a name="onmessage"><div class="fnhead" style="margin-top:5px">onmessage</div></a>
    <dd>
        Sets a callback function that is invoked when a websocket message is received.
        Optional.
        <h4>Parameters</h4>
        <table style="margin-left:-12px">
            <tr><td class="param">function <b>callback</b>(<a href="#WebsocketClientConnection">WebsocketClientConnection</a> connection, message)</td><td>A callback that will be called when the connection is closed. The message attribute represents the text received with the message.</td></tr>
        </table>
        <h4>Return value</h4>
        <table style="margin-left:-12px">
            <tr><td class="param"><a href="#WebsocketClientConnection">WebsocketClientConnection</a></td><td>A reference to the object itself. Useful for method chaining.</td></tr>
        </table>
    </dd>
    <dd>
        <pre><code class="JS">websocket.onmessage(function(conn, msg) {
    var obj = JSON.parse(msg);
    if (obj.mt == "SomeMessage") {
        // ...
    }
});</code></pre>
    </dd>

    <a name="send"><div class="fnhead" style="margin-top:5px">send</div></a>
    <dd>
        Sends a websocket text message.
        <h4>Parameters</h4>
        <table style="margin-left:-12px">
            <tr><td class="param">string <b>message</b></td><td>The text message to be sent.</td></tr>
        </table>
        <h4>Return value</h4>
        <table style="margin-left:-12px">
            <tr><td class="param"><a href="#WebsocketClientConnection">WebsocketClientConnection</a></td><td>A reference to the object itself. Useful for method chaining.</td></tr>
        </table>
    </dd>
    <dd>
        <pre><code class="JS">websocket.send(JSON.stringify({ mt: "SomeMessage" }));</code></pre>
    </dd>

    <a name="setFlowControl"><div class="fnhead" style="margin-top:5px">setFlowControl</div></a>
    <dd>
        Enables flow control for the connection. That means that after receiving a message with the <a href="#onmessage">onmessage</a> callback, the <a href="#WebsocketClientConnection">WebsocketClientConnection</a> 
        waits for the application to call <a href="messageComplete">messageComplete</a> before receiving more messages.
        Optional.
        <h4>Parameters</h4>
        <table style="margin-left:-12px">
            <tr><td class="param">bool <b>enabled</b></td><td>True if flow controll shall be used.</td></tr>
        </table>
        <h4>Return value</h4>
        <table style="margin-left:-12px">
            <tr><td class="param"><a href="#WebsocketClientConnection">WebsocketClientConnection</a></td><td>A reference to the object itself. Useful for method chaining.</td></tr>
        </table>
    </dd>
    <dd>
        <pre><code class="JS">websocket.setFlowControl(true);

websocket.onmessage(function(conn, msg) {
    var obj = JSON.parse(msg);
    if (obj.mt == "SomeMessage") {
        // ...
    }
    conn.messageComplete();
});</code></pre>
    </dd>

    <a name="messageComplete"><div class="fnhead" style="margin-top:5px">messageComplete</div></a>
    <dd>
        Tells the library to receive the next websocket message.
        See <a href="#setFlowControl">setFlowControl</a> for details.
        <h4>Return value</h4>
        <table style="margin-left:-12px">
            <tr><td class="param"><a href="#WebsocketClientConnection">WebsocketClientConnection</a></td><td>A reference to the object itself. Useful for method chaining.</td></tr>
        </table>
    </dd>
    <dd>
        <pre><code class="JS">websocket.setFlowControl(true);

websocket.onmessage(function(conn, msg) {
    var obj = JSON.parse(msg);
    if (obj.mt == "SomeMessage") {
        // ...
    }
    conn.messageComplete();
});</code></pre>
    </dd>
</body>
</html>
