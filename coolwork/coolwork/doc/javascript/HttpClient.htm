<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title>innovaphone SDK - HttpClient</title>
    <link rel="stylesheet" href="../../web1/doc/innovaphone.doc.css" type="text/css" />
    <link rel="stylesheet" href="../../web1/doc/vs.css">
    <script src="../../web1/doc/highlight.pack.js"></script>
    <script>hljs.initHighlightingOnLoad();</script>
</head>

<body>
    <h1>HttpClient</h1>
    <p>
        This document describes the HttpClient available in the JavaScript environment for app serivices.
    </p>

    <h2>Table of content</h2>
    <table>
        <tr>
            <td><b>Object</b></td>
            <td><b><a href="#HttpClient">HttpClient</a></b><br /></td>
        </tr>
        <tr>
            <td><b>Functions</b></td>
            <td>
                <a href="#request">request</a><br />
                <a href="#timeout">timeout</a><br />
                <br />
            </td>
        </tr>
        <tr>
            <td><b>Object</b></td>
            <td>
                <b><a href="#HttpClientRequest">HttpClientRequest</a></b><br />
            </td>
        </tr>
        <tr>
            <td><b>Functions</b></td>
            <td>
                <a href="#auth">auth</a><br />
                <a href="#header">header</a><br />
                <a href="#contentType">contentType</a><br />
                <a href="#contentLength">contentLength</a><br />
                <a href="#onrecv">onrecv</a><br />
                <a href="#recv">recv</a><br />
                <a href="#onsend">onsend</a><br />
                <a href="#send">send</a><br />
                <a href="#oncomplete">oncomplete</a><br />
                <a href="#onerror">onerror</a><br />
                <a href="#responseCode">responseCode</a><br />
                <a href="#responseHeader">responseHeader</a><br />
                <a href="#close">close</a><br />
                <br />
            </td>
        </tr>
        <tr>
            <td><b>Examples</b></td>
            <td>
                <a href="#Example-GET">GET request</a><br />
                <a href="#Example-PUT">PUT request</a><br />
                <a href="#Example-DELETE">DELETE request</a><br />
            </td>
        </tr>
    </table>

    <h2><a name="HttpClient">HttpClient</a></h2>

    <a name="request"><div class="fnhead" style="margin-top:5px">request</div></a>
    <dd>
        Creates an HttpClientRequest object. The actual request is started asynchronously. So synchronous function calls on that object are handled before the request is sent.
        <h4>Parameters</h4>
        <table style="margin-left:-12px">
            <tr><td class="param">string <b>method</b></td><td>The HTTP method to be used. Supported values are "GET", "PUT", "POST", "DELETE".</td></tr>
            <tr><td class="param">string <b>uri</b></td><td>An absolute http: or https: URI.</td></tr>
        </table>
        <h4>Return value</h4>
        <table style="margin-left:-12px">
            <tr><td class="param"><a href="#HttpClientRequest">HttpClientRequest</a></td><td>An object representing the request.</td></tr>
        </table>
    </dd>
    <dd>
        <pre><code class="JS">var req = HttpClient.request("GET", "https://www.innovaphone.com");</code></pre>
    </dd>

    <a name="timeout"><div class="fnhead" style="margin-top:5px">timeout</div></a>
    <dd>
        Sets a timeout that shall be used for HTTP requests. If the function is not called by the application, a default timeout of 60s is used.
        HTTP requests will be terminated if the server does not respond or sends no more data for the specified time. In that cases the <a href="#onerror">onerror</a> callback is
        invoked with error "HTTP_SHUTDOWN_TIMEOUT".

        <h4>Parameters</h4>
        <table style="margin-left:-12px">
            <tr><td class="param">string <b>timeoutMs</b></td><td>The desired timeout in milliseconds. 0 means that no timeout shall be used.</td></tr>
        </table>
        <h4>Return value</h4>
        <table style="margin-left:-12px">
            <tr><td class="param"><a href="#HttpClient">HttpClient</a></td><td>A reference to the object itself. Useful for method chaining.</td></tr>
        </table>
    </dd>
    <dd>
        <pre><code class="JS">var req = HttpClient.timeout(30000);</code></pre>
    </dd>

    <h2><a name="HttpClientRequest">HttpClientRequest</a></h2>

    <a name="auth"><div class="fnhead" style="margin-top:5px">auth</div></a>
    <dd>
        Sets credentials that shall be used for HTTP authentication (basic, digest, ntlm), if requested by the server.<br />
        Optional. Calls must be done before the request is sent, e.g. synchronously after creating the HttpClientRequest object.
        <h4>Parameters</h4>
        <table style="margin-left:-12px">
            <tr><td class="param">string <b>username</b></td><td></td></tr>
            <tr><td class="param">string <b>password</b></td><td></td></tr>
        </table>
        <h4>Return value</h4>
        <table style="margin-left:-12px">
            <tr><td class="param"><a href="#HttpClientRequest">HttpClientRequest</a></td><td>A reference to the object itself. Useful for method chaining.</td></tr>
        </table>
    </dd>
    <dd>
        <pre><code class="JS">req.auth("someuser","somepassword");</code></pre>
    </dd>

    <a name="header"><div class="fnhead" style="margin-top:5px">header</div></a>
    <dd>
        Sets a custom request header.<br />
        Optional. Calls must be done before the request is sent, e.g. synchronously after creating the HttpClientRequest object.
        <h4>Parameters</h4>
        <table style="margin-left:-12px">
            <tr><td class="param">string <b>field</b></td><td>Name of the header field.</td></tr>
            <tr><td class="param">string <b>value</b></td><td>Value of the header field.</td></tr>
        </table>
        <h4>Return value</h4>
        <table style="margin-left:-12px">
            <tr><td class="param"><a href="#HttpClientRequest">HttpClientRequest</a></td><td>A reference to the object itself. Useful for method chaining.</td></tr>
        </table>
    </dd>
    <dd>
        <pre><code class="JS">req.header("X-Token","c29tZXRva2Vu");</code></pre>
    </dd>

    <a name="contentType"><div class="fnhead" style="margin-top:5px">contentType</div></a>
    <dd>
        Sets the content type of the request body (PUT or POST). If the function is not called, "text/plain" will be used as a default.<br />
        Optional. Calls must be done before the request is sent, e.g. synchronously after creating the HttpClientRequest object.
        <h4>Parameters</h4>
        <table style="margin-left:-12px">
            <tr><td class="param">string <b>value</b></td><td>An Internet Media Type value.</td></tr>
        </table>
        <h4>Return value</h4>
        <table style="margin-left:-12px">
            <tr><td class="param"><a href="#HttpClientRequest">HttpClientRequest</a></td><td>A reference to the object itself. Useful for method chaining.</td></tr>
        </table>
    </dd>
    <dd>
        <pre><code class="JS">req.contentType("application/json");</code></pre>
    </dd>

    <a name="contentLength"><div class="fnhead" style="margin-top:5px">contentLength</div></a>
    <dd>
        Sets the content length of the request body (PUT or POST). If the function is not called, chunked encoding will be used.<br />
        Optional. Calls must be done before the request is sent, e.g. synchronously after creating the HttpClientRequest object.<br />
        Setting the content length requires the application to send excactly the specified number of bytes using the <a href="#send">send</a> function.
        <h4>Parameters</h4>
        <table style="margin-left:-12px">
            <tr><td class="param">uint <b>value</b></td><td>The content length in bytes.</td></tr>
        </table>
        <h4>Return value</h4>
        <table style="margin-left:-12px">
            <tr><td class="param"><a href="#HttpClientRequest">HttpClientRequest</a></td><td>A reference to the object itself. Useful for method chaining.</td></tr>
        </table>
    </dd>
    <dd>
        <pre><code class="JS">req.contentLength(17);</code></pre>
    </dd>

    <a name="onrecv"><div class="fnhead" style="margin-top:5px">onrecv</div></a>
    <dd>
        Sets a callback function for receiving response data. The data is received asynchronouly using flow control. So only a specified number of bytes is received at a time. After invoking the onrecv callback, the library waits for the application to process the data. To receive the next chunk of data the application must call <a href="#recv">recv</a>.<br />
        Optional. If no callback is set, the library will silently discard the response data.
        <h4>Parameters</h4>
        <table style="margin-left:-12px">
            <tr><td class="param">function <b>callback</b>(<a href="#HttpClientRequest">HttpClientRequest</a> request, Uint8Array data, bool last)</td><td>A callback that will be called when response data is received.</td></tr>
            <tr><td class="param">int <b>bufferSize</b></td><td>The maxiumum number of bytes that shall be received per callback.</td></tr>
        </table>
        <h4>Return value</h4>
        <table style="margin-left:-12px">
            <tr><td class="param"><a href="#HttpClientRequest">HttpClientRequest</a></td><td>A reference to the object itself. Useful for method chaining.</td></tr>
        </table>
    </dd>
    <dd>
        <pre><code class="JS">var responseData = "";

req.onrecv(function(req, data, last) {
    responseData += new TextDecoder("utf-8").decode(data);
    if (!last) req.recv();
}, 1024);</code></pre>
    </dd>

    <a name="recv"><div class="fnhead" style="margin-top:5px">recv</div></a>
    <dd>
        Tells the library to receive the next chunk of data.<br />
        Must be called after receiving the onrecv callback, if the last parameter was false.
        <h4>Return value</h4>
        <table style="margin-left:-12px">
            <tr><td class="param"><a href="#HttpClientRequest">HttpClientRequest</a></td><td>A reference to the object itself. Useful for method chaining.</td></tr>
        </table>
    </dd>
    <dd>
        <pre><code class="JS">req.onrecv(function(req, data, last) {
    if (!last) req.recv();
});</code></pre>
    </dd>

    <a name="onsend"><div class="fnhead" style="margin-top:5px">onsend</div></a>
    <dd>
        Sets a callback function for sending request body data. The data is sent asynchronouly using flow control. So the library invokes the callback to notify the application that is ready to send data. Then it waits for the application to call <a href="#send">send</a>.
        Optional. If no callback is set, the library will send a request with an empty body.
        <h4>Parameters</h4>
        <table style="margin-left:-12px">
            <tr><td class="param">function <b>callback</b>(<a href="#HttpClientRequest">HttpClientRequest</a> request)</td><td>A callback that will be called when the libary is ready to send data.</td></tr>
        </table>
        <h4>Return value</h4>
        <table style="margin-left:-12px">
            <tr><td class="param"><a href="#HttpClientRequest">HttpClientRequest</a></td><td>A reference to the object itself. Useful for method chaining.</td></tr>
        </table>
    </dd>
    <dd>
        <pre><code class="JS">req.onsend(function(req) {
    req.send(new TextEncoder("utf-8").encode("somedata"), true);
});</code></pre>
    </dd>

    <a name="send"><div class="fnhead" style="margin-top:5px">send</div></a>
    <dd>
        Tells the library to send the next chunk of data.<br />
        Must be called after receiving the onsend callback.
        <h4>Parameters</h4>
        <table style="margin-left:-12px">
            <tr><td class="param">Uint8Array <b>data</b></td><td>The data to be sent.</td></tr>
            <tr><td class="param">bool <b>last</b></td><td>false if there is more data to be sent and the application wants to receive another onsend callback. true for the last chunk of data.</td></tr>
        </table>
        <h4>Return value</h4>
        <table style="margin-left:-12px">
            <tr><td class="param"><a href="#HttpClientRequest">HttpClientRequest</a></td><td>A reference to the object itself. Useful for method chaining.</td></tr>
        </table>
    </dd>
    <dd>
        <pre><code class="JS">req.onsend(function(req) {
    req.send(new TextEncoder("utf-8").encode("somedata"), true);
});</code></pre>
    </dd>

    <a name="oncomplete"><div class="fnhead" style="margin-top:5px">oncomplete</div></a>
    <dd>
        Sets a callback function that is invoked when the request is completed.
        Optional.
        <h4>Parameters</h4>
        <table style="margin-left:-12px">
            <tr><td class="param">function <b>callback</b>(<a href="#HttpClientRequest">HttpClientRequest</a> request, bool success)</td><td>A callback that will be called when the request is complete.</td></tr>
        </table>
        <h4>Return value</h4>
        <table style="margin-left:-12px">
            <tr><td class="param"><a href="#HttpClientRequest">HttpClientRequest</a></td><td>A reference to the object itself. Useful for method chaining.</td></tr>
        </table>
    </dd>
    <dd>
        <pre><code class="JS">req.oncomplete(function(req, success) {
    log("HttpRequest " + (success ? "succeeded" : "failed"));
});</code></pre>
    </dd>

    <a name="onerror"><div class="fnhead" style="margin-top:5px">onerror</div></a>
    <dd>
        Sets a callback function that is invoked when the request has been aborted.
        Optional. If no onerror callback is set, aborted requests will lead to an <a href="#oncomplete">oncomplete</a> callback with success=false instead.
        <h4>Parameters</h4>
        <table style="margin-left:-12px">
            <tr>
                <td class="param">function <b>callback</b>(error)</td>
                <td>
                    A callback that will be called when the request has been aborted. The parameter error is a string representation of <a href="../../sdk/common/interface/http_client.htm#http_shutdown_reason_t">http_shutdown_reason_t</a>.
                </td>
            </tr>
        </table>
        <h4>Return value</h4>
        <table style="margin-left:-12px">
            <tr><td class="param"><a href="#HttpClientRequest">HttpClientRequest</a></td><td>A reference to the object itself. Useful for method chaining.</td></tr>
        </table>
    </dd>
    <dd>
        <pre><code class="JS">req.oncomplete(function(req, success) {
    log("HttpRequest complete");
})
.onerror(function(error) {
    log("HttpRequest error=" + error);
});</code></pre>
    </dd>

    <a name="responseCode"><div class="fnhead" style="margin-top:5px">responseCode</div></a>
    <dd>
        Returns the HTTP response status code.<br />
        Optional. Can be called after the request is completed and the response has been received.
        <h4>Return value</h4>
        <table style="margin-left:-12px">
            <tr><td class="param">integer</td><td>If the response header has been received already: The HTTP status code of the response.</td></tr>
            <tr><td class="param">undefined</td><td>If the response header has not been received yet.</td></tr>
        </table>
    </dd>
    <dd>
        <pre><code class="JS">var code = req.responseCode();</code></pre>
    </dd>

    <a name="responseHeader"><div class="fnhead" style="margin-top:5px">responseHeader</div></a>
    <dd>
        Returns the value of a header field in the response.<br />
        Optional. Can be called after the request is completed and the response has been received.
        <h4>Parameters</h4>
        <table style="margin-left:-12px">
            <tr><td class="param">string <b>field</b></td><td>The name of the header field.</td></tr>
        </table>
        <h4>Return value</h4>
        <table style="margin-left:-12px">
            <tr><td class="param">array[string]</td><td>An array of strings containing the values for the specified response header. Note that a header field can occur multiple times. That is why an array is returned instead of a single string.</td></tr>
        </table>
    </dd>
    <dd>
        <pre><code class="JS">var arr = req.responseHeader("X-Token");</code></pre>
    </dd>

    <a name="close"><div class="fnhead" style="margin-top:5px">close</div></a>
    <dd>
        Can be used to abort the request at any time.
        <h4>Return value</h4>
        <table style="margin-left:-12px">
            <tr><td class="param"><a href="#HttpClientRequest">HttpClientRequest</a></td><td>A reference to the object itself. Useful for method chaining.</td></tr>
        </table>
    </dd>
    <dd>
        <pre><code class="JS">req.close();</code></pre>
    </dd>

    <h2>Examples</h2>

    <h3><a name="Example-GET">GET request</a></h3>
    In this example we get a text file in 2048 byte chunks and print the content to the log.

    <pre><code class="JS">var text = "";

HttpClient.request("GET", "https://www.example.com/file.txt")
    .onrecv(function (req, data, last) {
        text += new TextDecoder("utf-8").decode(data);
        if (!last) req.recv();
    }, 2048)
    .oncomplete(function(req, success) {
        if (success) log("GET OK\n" + text);
        else log("GET ERROR");
    });</code></pre>

    <h3><a name="Example-PUT">PUT request</a></h3>
    In this example we put a text file with the content "sometext".

    <pre><code class="JS">HttpClient.request("PUT", "https://www.example.com/file.txt")
    .contentType("text/plain")
    .onsend(function(req) {
        req.send(new TextEncoder("utf-8").encode("sometext"), true);
    })
    .oncomplete(function(req, success) {
        log(success ? "PUT OK" : "PUT ERROR");
    });</code></pre>

    <h3><a name="Example-DELETE">DELETE request</a></h3>
    In this example we delete a text file.

    <pre><code class="JS">HttpClient.request("DELETE", "https://www.example.com/file.txt")
    .oncomplete(function(req, success) {
        log(success ? "DELETE OK" : "DELETE ERROR");
    });</code></pre>
</body>
</html>
