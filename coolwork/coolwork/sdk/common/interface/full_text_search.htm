<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title>Full-Text Search</title>
    <link rel="stylesheet" href="../../../web1/doc/innovaphone.doc.css" type="text/css" />
    <link rel="stylesheet" href="../../../web1/doc/vs.css">
</head>

<body>
    <script src="../../../web1/doc/highlight.pack.js"></script>
    <script>hljs.initHighlightingOnLoad();</script>

    <h1>full_text_search.h</h1>

    <p>
        full_text_search.h defines an abstract interface for all different kinds of full test search
        providers. The following operations are defined:
        <dl>
            <dt>Initialization</dt>
            <dd>
                At the start of the service, the search provider may do some initialization like checking
                if needed database tables are already available and if not create them.
            </dd>
            <dt>Add Text</dt>
            <dd>
                If a new text is stored, it can be added to the search.
            </dd>
            <dt>Search</dt>
            <dd>
                For the search, it is assumed that the input in any search control is passed to the search
                provider, without any processing. Multiple search results may be returned as reference which
                was provided, when the text was added. An additional id for any search result is given, which
                may be used to request more results.
            </dd>
        </dl>
    </p>

    <dl>
        <dt>Content</dt>
        <dd><a href="#class IFullTextSearch">class IFullTextSearch</a></dd>
    </dl>

    <h2><a id="class IFullTextSearch">class IFullTextSearch</a></h2>

    <p>
        The class IFullTextSearch is the interface of the search provider. It is returned by a provider
        specific create function, which is outside the scope of this specification. It provides public
        member functions for the individual operations.
    </p>

    <pre><code class="C++">class IFullTextSearch {
public:
    virtual ~IFullTextSearch() {}
    virtual class IFullTextSearchStart * <a href="#IFullTextSearch.Start">Start</a>(class UTask * user, class IDatabase * database, const char * reference) = 0;
    virtual class IFullTextSearchAdd * <a href="#IFullTextSearch.Add">Add</a>(class UTask * user, const char * text, ulong64 reference) = 0;
    virtual class IFullTextSearchExec * <a href="#IFullTextSearch.Exec">Exec</a>(class UTask * user, const char * input, ulong64 more, const char * select, const char * join, unsigned count) = 0;
};
</code></pre>
    <h3><a id="IFullTextSearch.Start">Start</a></h3>
    
    <p>
        The start function is used to start the initialization task. Any database tables needed by the
        search provider internally will be initialzed.
    </p>
    <dl>
        <dt>database</dt>
        <dd>
            The database connection to be used.
        </dd>
        <dt>reference</dt>
        <dd>
            Reference to the objects being searched as SQL expression.
            Example: "BIGINT REFERENCES messages(id) ON DELETE CASCADE"
        </dd>
    </dl>
    <p>
        It returns a pointer to the class IFullTextSearchStart, which can be used in the TaskComplete and TaskFailed
        callbacks to identify the request to which these callbacks are related.
    </p>

    <h3><a id="IFullTextSearch.Add">Add</a></h3>

    <p>
        Starts the task of adding text to the search.
    </p>
    <dl>
        <dt>text</dt>
        <dd>
            The raw text, as stored by the object which can be searched. The text is assumed to be in the HTML format, so
            any text inside &lt; and &gt; and &amp; and ; is ignored.
        </dd>
        <dt>reference</dt>
        <dd>
            The reference of the object to be found.
        </dd>
    </dl>
    <p>
        It returns a pointer to the class IFullTextSearchAdd, which can be used in the TaskComplete and TaskFailed
        callbacks to identify the request to which these callbacks are related.
    </p>

    <h3><a id="IFullTextSearch.Exec">Exec</a></h3>

    <p>
        Starts the execution of a search.
    </p>
    <dl>
        <dt>input</dt>
        <dd>
            The search as the user has entered. The input is assumed to be in the HTML format, so
            any text inside &lt; and &gt; and &amp; and ; is ignored.
        </dd>
        <dt>more</dt>
        <dd>
            Id of the last search result, so that a new search with the same input can be started for more
            results. If 0 is used, a new search is assumed, which is identical to using the maximum long64
            value as more.
        </dd>
        <dt>select</dt>
        <dd>
            A SQL select clause which is used to select the returned values.
        </dd>
        <dd>
            Example: "author.sip AS sip, author.dn AS dn"
        </dd>
        <dt>join</dt>
        <dd>
            A SQL JOIN clause, which joins the elements of the table which is searched to the index table
            of the full text search. This can be used to apply a filter to the elements.
        </dd>
        <dd>
            Example: "JOIN objects author ON messages.author = author.id"
        </dd>
    </dl>
    <p>A class IFullTextSearchExec is returned. For each result a TaskProgress is called.</p>
    <pre><code class="C++">class IFullTextSearchExec : public ITask {
public:
    virtual ulong64 GetId() = 0;
    virtual void Next() = 0;

    virtual int GetInt(const char * columnName) = 0;
    virtual dword GetUInt(const char * columnName) = 0;
    virtual long64 GetLong64(const char * columnName) = 0;
    virtual ulong64 GetULong64(const char * columnName) = 0;
    virtual bool GetBool(const char * columnName) = 0;
    virtual double GetDouble(const char * columnName) = 0;
    virtual const char * GetString(const char * columnName) = 0;
    virtual const char * GetStringWithNull(const char * columnName) = 0;
    virtual size_t GetDataSize(const char * columnName) = 0;
    virtual const byte * GetDataValue(const char * columnName) = 0;
};
</code></pre>
    <dl>
        <dt>GetId</dt>
        <dd>
            This function can be used to get the id of the current result. The last id received can be used
            as more argument to read more results.
        </dd>
        <dt>Next</dt>
        <dd>
            Get the next result.
        </dd>
        <dt>GetInt, GetUInt, ...</dt>
        <dd>
            Read the values from the joined tables from the dataset, as identfied by the select value.
        </dd>
    </dl>
</body>
