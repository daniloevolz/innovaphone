<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title>translation</title>
    <link rel="stylesheet" href="../../../web1/doc/innovaphone.doc.css" type="text/css" />
    <link rel="stylesheet" href="../../../web1/doc/vs.css">
</head>
<body>
    <script src="../../../web1/doc/highlight.pack.js"></script>
    <script>hljs.initHighlightingOnLoad();</script>

    <h1>translation</h1>
    <p>
        ITranslation is a simple translation client which can use different Translation Services Translation Service.
    </p>

    <h2>File information</h2>
    <table style="margin-left:-12px">
        <tr><td><b>File</b></td><td>common/interface/translation.h<br><br></td></tr>
        <tr>
            <td><b>Functions</b></td>
            <td>
                <a href="#FunctionsToInitialize">Functions to initialize</a><br>
            </td>
        </tr>
        <tr>
            <td><b>Classes</b></td>
            <td>
                <a href="#ITranslation">ITranslation</a><br>
                <a href="#UTranslation">UTranslation</a><br />
                <br>
            </td>
        </tr>
        <tr>
            <td><b>Examples</b></td>
            <td>
                <a href="#example">Code Example</a><br>
                <br>
            </td>
        </tr>
    </table>

    <h1>Functions</h1>
    <h2 id="FunctionsToInitialize">Functions to initialize</h2>
    <pre><code class="C++">extern "C" ITranslation * CreateIBMTranslation(class IIoMux* const iomux,
    class ISocketProvider* const tcpSocketProvider,
    class ISocketProvider* const tlsSocketProvider,
    class ISocketContext* socketContext,
    class UTranslation* const user,
    class IInstanceLog* const log,
    const char* endpoint_url,
    const char* resource_name,
    const char* api_key);
</code></pre>
    <div class="fnhead">CreateIBMTranslation</div>
    <dd>
        Create an ITranslation instance.

        <h4>Parameters</h4>
        <table style="margin-left:-12px">
            <tr><td class="param">IIoMux * const <b>iomux</b></td><td>The iomux instance needed for socket communication.</td></tr>
            <tr><td class="param">ISocketProvider * const <b>tcpSocketProvider</b></td><td>A socket provider to create a TCP socket.</td></tr>
            <tr><td class="param">ISocketProvider * const <b>tlsSocketProvider</b></td><td>A socket provider to create a TLS socket.</td></tr>
            <tr><td class="param">ISocketContext * const <b>socketContext</b></td><td>An optional socketContext which can be used for the socket which is created by the httpclient. You can disable sending of a client certificate with this socketContext or send a specific own client certificate.</td></tr>
            <tr><td class="param">UTranslation * const <b>user</b></td><td>An UTranslation instance to receive the callbakcs from ITranslation.</td></tr>
            <tr><td class="param">IInstanceLog * const <b>log</b></td><td>The log instance for logging.</td></tr>
            <tr><td class="param">const char* <b>endpoint_url</b></td><td>The URL of the IBM Server for the requests.</td></tr>
            <tr><td class="param">const char* <b>resource_name</b></td><td>The Resource on the IBM Server for the request.</td></tr>
            <tr><td class="param">const char* <b>api_key</b></td><td>The API Key to access the translation service.</td></tr>
        </table>

        <h4>Return Value</h4>
        The ITranslation instance created. Must be deleted if no longer used.
    </dd>

    <h1>Classes</h1>
    <h2 id="ITranslation">ITranslation</h2>
    <pre><code class="C++">class ITranslation {
public:
    virtual ~ITranslation() {};
    virtual void Translate(class TranslationObject* translationObject) = 0;
    virtual void Shutdown() = 0;
};</code></pre>
    <p>
        This is the main class of the Translation module. The translation-module is using an external webservice from IBM to translate the texts.
        Therefore it requires informations from the IBM Cloud Language Translator
        (<a href="https://www.ibm.com/cloud/watson-language-translator">IBM Watson Translator</a>).
    </p>

    <h3>Public functions</h3>

    <div class="fnhead">Translate</div>
    <dd>
        Translate the given text to the given language. For supported languages have a look to the IBM documentation.
        <h4>Parameters</h4>
        <table style="margin-left:-12px">
            <tr><td class="param">class TranslationObject* <b>translationObject</b></td><td>The translation object, which should be translated.</td></tr>
        </table>

        <h4>Callbacks</h4>
        UTranslation::TranslationCompleted(const char* translation) will be called after the data has been translated.

        <h4>Remarks</h4>
        There should be only one translation requested at a time. It's not supported to translate two texts with the same instance on the same time.
    </dd>

    <h2 id="UTranslation">UTranslation</h2>
    <pre><code class="C++">class UTranslation {
public:
    virtual void TranslationConnected(const ITranslation* translator) = 0;
    virtual void TranslationCompleted(const ITranslation* translator, class TranslationObject* translationObject) = 0;
    virtual void TranslationShutdown(const ITranslation* translator) = 0;
    ~UTranslation() {}
};</code></pre>
    <p>
        This class is for receiving callbacks from the ITranslation. You must pass as subclass of UTranslation to an ITranslation as user.
    </p>

    <div class="fnhead">TranslationCompleted</div>
    <dd>
        Will be called after the translation has been completed.

        <h4>Parameters</h4>
        <table style="margin-left:-12px">
            <tr><td class="param">ITranslation * const <b>httpClient</b></td><td>The calling ITranslation instance.</td></tr>
            <tr><td class="param">class TranslationObject* <b>translationObject</b></td><td>The translation object with the translated text</td></tr>
        </table>
    </dd>

    <div class="fnhead">TranslationShutdown</div>
    <dd>
        Will be called after the translation has been closed.

        <h4>Parameters</h4>
        <table style="margin-left:-12px">
            <tr><td class="param">ITranslation * const <b>httpClient</b></td><td>The calling ITranslation instance.</td></tr>
        </table>
    </dd>

    <h2 id="TranslationObject">TranslationObject</h2>
    <pre><code class="C++">class TranslationObject : public istd::listElement<TranslationObject> {
public:
    const char* getSource_Language() { return source_language; };
    const char* getTarget_Language() { return target_language; };
    const char* getTranslation() { return translation; };
    TranslationObject(const char* text, const char* source_language, const char* target_language);
    ~TranslationObject();
};
    </code></pre>
    This class is for creating an Object which handles the translation 

    <div class="fnhead">TranslationObject</div>
    <dd>
        Constructor for a translation object.

        <h4>Parameters</h4>
        <table style="margin-left:-12px">
            <tr><td class="param">const char* <b>text</b></td><td>The text, which should be translated.</td></tr>
            <tr><td class="param">const char* <b>source_language</b></td><td>The source language</td></tr>
            <tr><td class="param">const char* <b>target_language</b></td><td>The target language</td></tr>
        </table>
    </dd>

    <div class="fnhead">getSource_Language</div>
    <dd>
        Readout the source language.

        <h4>Return Value</h4>
        Returns the target language.
    </dd>

    <div class="fnhead">getTarget_Language</div>
    <dd>
        Readout the target language.

        <h4>Return Value</h4>
        Returns the target language.
    </dd>

    <div class="fnhead">getTranslation</div>
    <dd>
        Readout the Translation.

        <h4>Return Value</h4>
        Returns the translated text.
    </dd>

    <h1 id="example">Code Example</h1>
    <pre><code class="C++">app::app(IIoMux * iomux)
    : iomux(iomux)
{
    // you can optionally create a socketContext, if you e.g. want to disable sending of a client certificate
    class ISocketContext * socketContext = aTlsSocketProvider->CreateSocketContext(this);
    socketContext->DisableClientCertificate();
    // create the translation instance
    this->translation = ITranslation::Create(iomux, service->tcpSocketProvider, service->tlsSocketProvider, socketContext, this, this, "https://api.eu-gb.language-translator.watson.cloud.ibm.com", "/instances/*****************", "******************");
    this->translation->Translate(new class TranslationObject("Hallo Welt", "de", "en"));
}

void STT::TranslationCompleted(const ITranslation* translator, const char* translation) {
    printf("Translation: %s", translation);
    this->translation->Shutdown();
}

void app::TranslationShutdown(const ITranslation* translator)
{
    delete this->translation;
}
</code></pre>

</body>
</html>
