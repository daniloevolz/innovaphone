<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title>innovaphone SDK - WebServer</title>
    <link rel="stylesheet" href="../../web1/doc/innovaphone.doc.css" type="text/css" />
    <link rel="stylesheet" href="../../web1/doc/vs.css">
    <script src="../../web1/doc/highlight.pack.js"></script>
    <script>hljs.initHighlightingOnLoad();</script>
</head>

<body>
    <h1>WebServer</h1>
    <p>
        This document describes the WebServer object in the JavaScript environment for app serivices.
    </p>

    <h2>Table of content</h2>
    <table>
        <tr>
            <td><b>Object</b></td>
            <td><b><a href="#WebServer">WebServer</a></b><br /></td>
        </tr>
        <tr>
            <td><b>Members</b></td>
            <td>
                <a href="#url">url</a><br />
            </td>
        </tr>
        <tr>
            <td><b>Functions</b></td>
            <td>
                <a href="#onurlchanged">onurlchanged</a><br />
                <a href="#onrequest">onrequest</a><br />
                <br />
            </td>
        </tr>

        <tr>
            <td><b>Object</b></td>
            <td>
                <b><a href="#WebServerRequest">WebServerRequest</a></b><br />
            </td>
        </tr>
        <tr>
            <td><b>Members</b></td>
            <td>
                <a href="#method">method</a><br />
                <a href="#relativeUri">relativeUri</a><br />
            </td>
        </tr>
        <tr>
            <td><b>Functions</b></td>
            <td>
                <a href="#cancel">cancel</a><br />
                <a href="#header">header</a><br />
                <a href="#onrecv">onrecv</a><br />
                <a href="#recv">recv</a><br />
                <a href="#onsend">onsend</a><br />
                <a href="#send">send</a><br />
                <a href="#oncomplete">oncomplete</a><br />
                <a href="#sendResponse">sendResponse</a><br />
                <a href="#responseHeader">responseHeader</a><br />
                <a href="#responseContentType">responseContentType</a><br />
                <a href="#responseFileName">responseFileName</a><br />
                <br />
            </td>
        </tr>

        <tr>
            <td><b>Object</b></td>
            <td>
                <b><a href="#WebServerAuthentication">WebServerAuthentication</a></b><br />
            </td>
        </tr>
        <tr>
            <td><b>Members</b></td>
            <td>
                <a href="#Auth_host">host</a><br />
                <a href="#Auth_relativeUri">relativeUri</a><br />
                <a href="#Auth_username">user</a><br />
            </td>
        </tr>
        <tr>
            <td><b>Functions</b></td>
            <td>
                <a href="#Auth_password">password</a><br />
                <a href="#Auth_reject">reject</a><br />
                <br />
            </td>
        </tr>

        <tr>
            <td><b>Examples</b></td>
            <td>
                <a href="#Example-REST">REST API using GET, PUT and DELETE</a><br />
            </td>
        </tr>
    </table>

    <h2><a name="WebServer">WebServer</a></h2>

    <a name="url"><div class="fnhead" style="margin-top:5px">url</div></a>
    <dd>
        A string containing the absolute base URL that can be used to access the web server.
        The app service learns the URL from the incoming websocket connection from the app object on the PBX. So it only contains a valid URL, if the "Websocket" checkmark is set on the app object and the connection is up.
        Otherwise <a href="#url">url</a> will point to localhost. Use <a href="#onurlchanged">onurlchanged</a> to get notified when the actual URL is available after the app service is started.
    </dd>

    <a name="onurlchanged"><div class="fnhead" style="margin-top:5px">onurlchanged</div></a>
    <dd>
        Registers a callback function that is invoked when the base URL of the web server has changed.
        <h4>Parameters</h4>
        <table style="margin-left:-12px">
            <tr><td class="param">function <b>callback</b>(string newUrl)</td><td>Called whenever WebServer.url has changed.</td></tr>
        </table>
        <h4>Return value</h4>
        <table style="margin-left:-12px">
            <tr><td class="param"><a href="#WebServer">WebServer</a></td><td>A reference to the object itself. Useful for method chaining.</td></tr>
        </table>
    </dd>
    <dd>
        <pre><code class="JS">var baseUrl = WebServer.url;
log("url: " + baseUrl);
        
WebServer.onurlchanged(function(newUrl) {
    baseUrl = newUrl;
    log("url: " + baseUrl);
});</code></pre>
    </dd>

    <a name="onrequest"><div class="fnhead" style="margin-top:5px">onrequest</div></a>
    <dd>
        Registers a relative URI on the web server and a callback function that is invoked on incoming requests on that URI.
        <h4>Parameters</h4>
        <table style="margin-left:-12px">
            <tr><td class="param">string <b>relativeUri</b></td><td>A URL relative to WebServer.url. Do not prepend "/", "./".</td></tr>
            <tr><td class="param">function <b>requestCallback</b>(<a href="#WebServerRequest">WebServerRequest</a> request)</td><td>The callback will be invoked on incoming HTTP requests to the given URI. If the callback is called, the application has to handle or cancel the request.</td></tr>
            <tr><td class="param">function <b>authenticationCallback</b>(<a href="#WebServerAuthentication">WebServerAuthentication</a> auth)</td><td>Optional. If the callback is set, the webserver will do HTTP authentication for the registered path. The callback will be invoked on incoming HTTP requests to ask to app service for the password for the given user.</td></tr>
        </table>
        <h4>Return value</h4>
        <table style="margin-left:-12px">
            <tr><td class="param"><a href="#WebServer">WebServer</a></td><td>A reference to the object itself. Useful for method chaining.</td></tr>
        </table>
    </dd>
    <dd>
        <pre><code class="JS">WebServer.onrequest("info.json", function(req) {
    // reject request for this example
    req.cancel();
});</code></pre>
    </dd>

    <h2><a name="WebServerRequest">WebServerRequest</a></h2>
    The WebServerRequest object passed to the application with the onrequest callback and can be used to handle incoming HTTP requests.

    <a name="method"><div class="fnhead" style="margin-top:5px">method</div></a>
    <dd>
        A string containing the HTTP method that was used for the request. Supported values: <ul><li>GET</li><li>POST</li><li>POST</li><li>DELETE</li></ul>.
    </dd>
    <dd>
        <pre><code class="JS">WebServer.onrequest("info.json", function(req) {
    if (req.method == "GET") {
        // handle GET
    }
    else if (req.method == "PUT") {
        // handle PUT
    }
    else if (req.method == "POST") {
        // handle POST
    }
    else if (req.method == "DELETE") {
        // handle DELETE
    }
    else {
        // should never happen
        req.cancel();
    }
});</code></pre>
    </dd>

    <a name="relativeUri"><div class="fnhead" style="margin-top:5px">relativeUri</div></a>
    <dd>
        A string containing the requested ressource relative to the base URL given with the onrequest function.
    </dd>
    <dd>
        <pre><code class="JS">WebServer.onrequest("weather", function(req) {
    if (req.method == "GET") {
        if (req.relativeUri == "/temperature") {
            // ...
        }
        else if (req.relativeUri == "/humidity") {
            // ...
        }
        else if (req.relativeUri == "/wind") {
            // ...
        }
        else {
            req.cancel();
        }
    }
    else  {
        req.cancel();
    }
});</code></pre>
    </dd>

    <a name="cancel"><div class="fnhead" style="margin-top:5px">cancel</div></a>
    <dd>
        Cancels the request. The client will get back an HTTP error.
        The application will get no more callbacks from the object, especially there will be no <a href="#oncomplete">oncomplete</a> callback.
        <h4>Parameters</h4>
        <table style="margin-left:-12px">
            <tr><td class="param">uint <b>responseCode</b></td><td>The HTTP status code to send with the response for the canceled request. Supported values are 404, 400, 451, 411, 402, 500. If no value is given status code 404 is used.</td></tr>
        </table>
        <h4>Return value</h4>
        <table style="margin-left:-12px">
            <tr><td class="param"><a href="#WebServerRequest">WebServerRequest</a></td><td>A reference to the object itself. Useful for method chaining.</td></tr>
        </table>
    </dd>
    <dd>
        <pre><code class="JS">WebServer.onrequest("info.json", function(req) {
    // reject request with 500 Internal Server Error
    req.cancel(500);
});</code></pre>
    </dd>

    <a name="header"><div class="fnhead" style="margin-top:5px">header</div></a>
    <dd>
        Returns the value of a given header field in the request.
        <h4>Parameters</h4>
        <table style="margin-left:-12px">
            <tr><td class="param">string <b>field</b></td><td>The name of the header field.</td></tr>
        </table>
        <h4>Return value</h4>
        <table style="margin-left:-12px">
            <tr><td class="param">string</td><td>The value of the specified header field.</td></tr>
        </table>
    </dd>
    <dd>
        <pre><code class="JS">WebServer.onrequest("info.json", function(req) {
    if (req.header("X-Token") == "c29tZXRva2Vu") {
        // handle request
    }
    else {
        req.cancel();
    }
});</code></pre>
    </dd>

    <a name="onrecv"><div class="fnhead" style="margin-top:5px">onrecv</div></a>
    <dd>
        Sets a callback function for receiving request data. The data is received asynchronouly using flow control. So only a specified number of bytes is received at a time. After invoking the onrecv callback, the library waits for the application to process the data. To receive the next chunk of data the application must call <a href="#recv">recv</a>.<br />
        Optional. If no callback is set, the library will silently discard the request data.
        <h4>Parameters</h4>
        <table style="margin-left:-12px">
            <tr><td class="param">function <b>callback</b>(<a href="#WebServerRequest">WebServerRequest</a> request, Uint8Array data)</td><td>A callback that will be called when request data is received. If the request is finished it will be called with data set to null.</td></tr>
            <tr><td class="param">int <b>bufferSize</b></td><td>Optional. The maxiumum number of bytes that shall be received per callback. Defaults to 16384, if not specified.</td></tr>
        </table>
        <h4>Return value</h4>
        <table style="margin-left:-12px">
            <tr><td class="param"><a href="#WebServerRequest">WebServerRequest</a></td><td>A reference to the object itself. Useful for method chaining.</td></tr>
        </table>
    </dd>
    <dd>
        <pre><code class="JS">var requestData = "";

req.onrecv(function(req, data) {
    if (data) {
        requestData += new TextDecoder("utf-8").decode(data);
        req.recv();
    }
}, 1024);</code></pre>
    </dd>

    <a name="recv"><div class="fnhead" style="margin-top:5px">recv</div></a>
    <dd>
        Tells the library to receive the next chunk of data.<br />
        Must be called after receiving the onrecv callback, unless data was null.
        <h4>Return value</h4>
        <table style="margin-left:-12px">
            <tr><td class="param"><a href="#WebServerRequest">WebServerRequest</a></td><td>A reference to the object itself. Useful for method chaining.</td></tr>
        </table>
    </dd>
    <dd>
        <pre><code class="JS">req.onrecv(function(req, data) {
    if (data) {
        // process data, then receive next chunk
        req.recv();
    }
});</code></pre>
    </dd>

    <a name="onsend"><div class="fnhead" style="margin-top:5px">onsend</div></a>
    <dd>
        Sets a callback function for sending response data. The data is sent asynchronouly using flow control. So the library invokes the callback to notify the application that is ready to send data. Then it waits for the application to call <a href="#send">send</a>.
        Optional. If no callback is set, the library will send a response with an empty body.
        <h4>Parameters</h4>
        <table style="margin-left:-12px">
            <tr><td class="param">function <b>callback</b>(<a href="#WebServerRequest">WebServerRequest</a> request)</td><td>A callback that will be called when the libary is ready to send data.</td></tr>
        </table>
        <h4>Return value</h4>
        <table style="margin-left:-12px">
            <tr><td class="param"><a href="#WebServerRequest">WebServerRequest</a></td><td>A reference to the object itself. Useful for method chaining.</td></tr>
        </table>
    </dd>
    <dd>
        <pre><code class="JS">req.onsend(function(req) {
    req.send(new TextEncoder("utf-8").encode("somedata"), true);
});</code></pre>
    </dd>

    <a name="send"><div class="fnhead" style="margin-top:5px">send</div></a>
    <dd>
        Tells the library to send the next chunk of data.<br />
        Must be called after receiving the onsend callback.
        <h4>Parameters</h4>
        <table style="margin-left:-12px">
            <tr><td class="param">Uint8Array <b>data</b></td><td>The data to be sent. The total size of the array must not exceed 65535.</td></tr>
            <tr><td class="param">bool <b>last</b></td><td>false if there is more data to be sent and the application wants to receive another onsend callback. true for the last chunk of data.</td></tr>
        </table>
        <h4>Return value</h4>
        <table style="margin-left:-12px">
            <tr><td class="param"><a href="#WebServerRequest">WebServerRequest</a></td><td>A reference to the object itself. Useful for method chaining.</td></tr>
        </table>
    </dd>
    <dd>
        <pre><code class="JS">req.onsend(function(req) {
    req.send(new TextEncoder("utf-8").encode("somedata"), true);
});</code></pre>
    </dd>

    <a name="oncomplete"><div class="fnhead" style="margin-top:5px">oncomplete</div></a>
    <dd>
        Sets a callback function that is invoked when the request / response is finished.
        Optional.
        <h4>Parameters</h4>
        <table style="margin-left:-12px">
            <tr><td class="param">function <b>callback</b>(<a href="#WebServerRequest">WebServerRequest</a> request, bool success)</td><td>A callback that will be called when the request is complete or was aborted.</td></tr>
        </table>
        <h4>Return value</h4>
        <table style="margin-left:-12px">
            <tr><td class="param"><a href="#WebServerRequest">WebServerRequest</a></td><td>A reference to the object itself. Useful for method chaining.</td></tr>
        </table>
    </dd>
    <dd>
        <pre><code class="JS">req.oncomplete(function(req, success) {
    log("WebServerRequest " + (success ? "succeeded" : "failed"));
});</code></pre>
    </dd>

    <a name="sendResponse"><div class="fnhead" style="margin-top:5px">sendResponse</div></a>
    <dd>
        Tells the library that the application has successfully processed the request and sets the HTTP status code that shall be sent with the response.
        Before calling this function the application has to set all parameters and callbacks that are needed to create the response,
        like <a href="#onsend">onsend</a>, <a href="#oncomplete">oncomplete</a>, <a href="#responseHeader">responseHeader</a>,
        <a href="#responseContentType">responseContentType</a>,
        or <a href="#responseFileName">responseFileName</a>.
        <h4>Parameters</h4>
        <table style="margin-left:-12px">
            <tr><td class="param">uint <b>code</b></td><td>Optional. The HTTP response code to be sent to the client. Defaulting to 200, if not specified. Supported values are <ul><li>200</li><li>201</li><li>204</li><li>207</li><li>403</li><li>405</li><li>409</li><li>412</li><li>423</li><li>502</li><li>507</li></ul>.</td></tr>
        </table>
        <h4>Return value</h4>
        <table style="margin-left:-12px">
            <tr><td class="param"><a href="#WebServerRequest">WebServerRequest</a></td><td>A reference to the object itself. Useful for method chaining.</td></tr>
        </table>
    </dd>
    <dd>
        <pre><code class="JS">req.sendResponse(200);</code></pre>
    </dd>

    <a name="responseHeader"><div class="fnhead" style="margin-top:5px">responseHeader</div></a>
    <dd>
        Sets a custom header field that shall be sent with the HTTP response.
        <h4>Parameters</h4>
        <table style="margin-left:-12px">
            <tr><td class="param">string <b>field</b></td><td>The name of the header field.</td></tr>
            <tr><td class="param">string <b>value</b></td><td>The value of the header field.</td></tr>
        </table>
        <h4>Return value</h4>
        <table style="margin-left:-12px">
            <tr><td class="param"><a href="#WebServerRequest">WebServerRequest</a></td><td>A reference to the object itself. Useful for method chaining.</td></tr>
        </table>
    </dd>
    <dd>
        <pre><code class="JS">req.header("X-Token","c29tZXRva2Vu");</code></pre>
    </dd>

    <a name="responseContentType"><div class="fnhead" style="margin-top:5px">responseContentType</div></a>
    <dd>
        Sets the content type for the data transmitted with the response.
        <h4>Parameters</h4>
        <table style="margin-left:-12px">
            <tr>
                <td class="param">string <b>contentType</b></td>
                <td>
                    A file name extension that will be converted to an Internet Media Type value internally by the webserver. Supported values are:
                    <ul>
                        <li>"html"</li>
                        <li>"htm"</li>
                        <li>"css"</li>
                        <li>"xml"</li>
                        <li>"xsl"</li>
                        <li>"js"</li>
                        <li>"json"</li>
                        <li>"ico"</li>
                        <li>"bin"</li>
                        <li>"jar"</li>
                        <li>"png"</li>
                        <li>"gif"</li>
                        <li>"bmp"</li>
                        <li>"pdf"</li>
                        <li>"wav"</li>
                        <li>"ogg"</li>
                        <li>"mp3"</li>
                        <li>"txt"</li>
                        <li>"soap"</li>
                        <li>"svg"</li>
                        <li>"ttf"</li>
                        <li>"eot"</li>
                        <li>"woff"</li>
                        <li>"woff2"</li>
                        <li>"g711a"</li>
                        <li>"g711u"</li>
                        <li>"g722"</li>
                        <li>"g729"</li>
                        <li>"jpeg"</li>
                        <li>"mp4"</li>
                        <li>"webm"</li>
                        <li>"pem"</li>
                        <li>"mobileconfig"</li>
                        <li>"appcache"</li>
                        <li>"opus-nb"</li>
                        <li>"opus-wb"</li>
                    </ul>
                </td>
            </tr>
        </table>
        <h4>Return value</h4>
        <table style="margin-left:-12px">
            <tr><td class="param"><a href="#WebServerRequest">WebServerRequest</a></td><td>A reference to the object itself. Useful for method chaining.</td></tr>
        </table>
    </dd>
    <dd>
        <pre><code class="JS">req.responseContentType("json");</code></pre>
    </dd>

    <a name="responseFileName"><div class="fnhead" style="margin-top:5px">responseFileName</div></a>
    <dd>
        The application can set a file name for the response data. This will cause the client to handle the HTTP response as a download. Should always be used together with <a href="#responseContentType">responseContentType</a>
        <h4>Parameters</h4>
        <table style="margin-left:-12px">
            <tr><td class="param">string <b>filename</b></td><td>The filename for the download.</td></tr>
        </table>
        <h4>Return value</h4>
        <table style="margin-left:-12px">
            <tr><td class="param"><a href="#WebServerRequest">WebServerRequest</a></td><td>A reference to the object itself. Useful for method chaining.</td></tr>
        </table>
    </dd>
    <dd>
        <pre><code class="JS">req.responseContentType("pdf").responseFileName("invoice.pdf");</code></pre>
    </dd>


    <h2><a name="WebServerAuthentication">WebServerAuthentication</a></h2>
    The WebServerAuthentication object represents a HTTP authentication happening on a path that was registered using the <a href="#onrequest">onrequest</a> function.
    It contains the relative path and the user name of the corresponding request. The application MUST call <a href="Auth_password">password</a> or <a href="Auth_reject">reject</a>
    so the web server can complete the request. Both functions can be called directly inside the authenticationCallback from the webserver or asynchonously after leaving the callback.

    <a name="Auth_host"><div class="fnhead" style="margin-top:5px">host</div></a>
    <dd>
        A string containing the host name used by the HTTP client for the authentication request.
    </dd>

    <a name="Auth_relativeUri"><div class="fnhead" style="margin-top:5px">relativeUri</div></a>
    <dd>
        A string containing the requested ressource relative to the base URL given with the onrequest function.
    </dd>

    <a name="Auth_user"><div class="fnhead" style="margin-top:5px">user</div></a>
    <dd>
        The username that was used by the HTTP client for authentication.
    </dd>

    <a name="Auth_password"><div class="fnhead" style="margin-top:5px">password</div></a>
    <dd>
        Sets the password that shall be used for the HTTP authentication request.
        Calling the function closes the object.
        <h4>Parameters</h4>
        <table style="margin-left:-12px">
            <tr><td class="param">string <b>password</b></td><td>The password that shall be used for the HTTP authentication request.</td></tr>
        </table>
    </dd>
    <dd>
        <pre><code class="JS">WebServer.onrequest("info.json", function(req) {
    // ...
}, function(auth) {
    if (auth.user == admin) auth.password("pwd");
    else auth.reject();
});</code></pre>
    </dd>

    <a name="Auth_reject"><div class="fnhead" style="margin-top:5px">reject</div></a>
    <dd>
        Rejects the HTTP authentication request.
        Calling the function closes the object.
    </dd>
    <dd>
        <pre><code class="JS">WebServer.onrequest("info.json", function(req) {
    // ...
}, function(auth) {
    if (auth.user == admin) auth.password("pwd");
    else auth.reject();
});</code></pre>
    </dd>


    <h3><a name="Example-REST">Example: REST API using GET, PUT and DELETE</a></h3>
    In this example we see how a simple REST API can be implemented. The REST API can read, store and delete an UTF-8 string value.

    <pre><code class="JS">// the variable containing the string value
var value = null;

WebServer.onrequest("value", function(req) {
    if (req.method == "GET") {
        if (value) {
            // value exists, send it back as text/plain
            req.responseContentType("txt")
                .sendResponse()
                .onsend(function(req) {
                    req.send(new TextEncoder("utf-8").encode(value), true);
                });
        }
        else {
            // value does not exist, send 404 Not Found
            req.cancel();
        }
    }
    else if (req.method == "PUT") {
        // overwrite existing value with newValue

        var newValue = "";
        req.onrecv(function(req, data) {
            if (data) {
                newValue += (new TextDecoder("utf-8").decode(data));
                req.recv();
            }
            else {
                value = newValue;
                req.sendResponse();
            }
        });
    }
    else if (req.method == "DELETE") {
        // delete value
        value = null;
        req.sendResponse();
    }
    else {
        req.cancel();
    }
});</pre></code>


</body>
</html>
