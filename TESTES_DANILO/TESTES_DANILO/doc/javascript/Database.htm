<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title>innovaphone SDK - Database</title>
    <link rel="stylesheet" href="../../web1/doc/innovaphone.doc.css" type="text/css" />
    <link rel="stylesheet" href="../../web1/doc/vs.css">
    <script src="../../web1/doc/highlight.pack.js"></script>
    <script>hljs.initHighlightingOnLoad();</script>
</head>

<body>
    <h1>Database</h1>
    <p>
        This document describes the Database object in the JavaScript environment for app serivices.
    </p>
    <p>
        The library uses the main database connection of the app service. The config.json of the JavaScript app can be used to define tables.
        It is guaranteed that the database connection is already up when the app code is evaluated.
    </p>

    <h2>Table of content</h2>
    <table>
        <tr>
            <td><b>Object</b></td>
            <td><b><a href="#Database">Database</a></b><br /></td>
        </tr>
        <tr>
            <td><b>Functions</b></td>
            <td>
                <a href="#insert">insert</a><br />
                <a href="#exec">exec</a><br />
                <a href="#transaction">transaction</a><br />
                <a href="#escape">escape</a><br />
                <br />
            </td>
        </tr>

        <tr>
            <td><b>Object</b></td>
            <td><b><a href="#DatabaseTransaction">DatabaseTransaction</a></b><br /></td>
        </tr>
        <tr>
            <td><b>Functions</b></td>
            <td>
                <a href="#DatabaseTransaction_begin">begin</a><br />
                <a href="#DatabaseTransaction_commit">commit</a><br />
                <a href="#DatabaseTransaction_rollback">rollback</a><br />
                <a href="#DatabaseTransaction_insert">insert</a><br />
                <a href="#DatabaseTransaction_exec">exec</a><br />
                <br />
            </td>
        </tr>

        <tr>
            <td><b>Object</b></td>
            <td>
                <b><a href="#DatabaseOperation">DatabaseOperation</a></b><br />
            </td>
        </tr>
        <tr>
            <td><b>Functions</b></td>
            <td>
                <a href="#DatabaseOperation_oncomplete">oncomplete</a><br />
                <a href="#DatabaseOperation_onerror">onerror</a><br />
                <br />
            </td>
        </tr>

        <tr>
            <td><b>Examples</b></td>
            <td>
                <a href="#Example-Transaction">Using database transactions</a><br />
            </td>
        </tr>
    </table>

    <h2><a name="Database">Database</a></h2>

    <a name="insert"><div class="fnhead" style="margin-top:5px">insert</div></a>
    <dd>
        Starts an SQL insert query.
        <h4>Parameters</h4>
        <table style="margin-left:-12px">
            <tr><td class="param">query</td><td>The SQL query. Note that the library will append " RETURNING id;" to the string.</td></tr>
        </table>
        <h4>Return value</h4>
        <table style="margin-left:-12px">
            <tr><td class="param"><a href="#DatabaseOperation">DatabaseOperation</a></td><td>The object representing the database operation.</td></tr>
        </table>
    </dd>
    <dd>
        <pre><code class="JS">Database.insert("INSERT INTO users (sip, domain) VALUES ('alice','example.com')")
    .oncomplete(function(id) { })
    .onerror(function(error, errorText, dbErrorCode) { });</code></pre>
    </dd>

    <a name="exec"><div class="fnhead" style="margin-top:5px">exec</div></a>
    <dd>
        Starts a general SQL query.
        <h4>Parameters</h4>
        <table style="margin-left:-12px">
            <tr><td class="param">query</td><td>The SQL query.</td></tr>
        </table>
        <h4>Return value</h4>
        <table style="margin-left:-12px">
            <tr><td class="param"><a href="#DatabaseOperation">DatabaseOperation</a></td><td>The object representing the database operation.</td></tr>
        </table>
    </dd>
    <dd>
        <pre><code class="JS">Database.exec("SELECT * FROM users")
    .oncomplete(function(data) { })
    .onerror(function(error, errorText, dbErrorCode) { });</code></pre>
    </dd>

    <a name="transaction"><div class="fnhead" style="margin-top:5px">transaction</div></a>
    <dd>
        Creates a <a href="#DatabaseTransaction">DatabaseTransaction</a> object.
        <h4>Return value</h4>
        <table style="margin-left:-12px">
            <tr><td class="param"><a href="#DatabaseTransaction">DatabaseTransaction</a></td><td>The created object.</td></tr>
        </table>
    </dd>
    <dd>
        <pre><code class="JS">var transaction = Database.transaction();</code></pre>
    </dd>

    <a name="escape"><div class="fnhead" style="margin-top:5px">escape</div></a>
    <dd>
        Escapes a string, so it can be safely used inside SQL queries.
        <h4>Parameters</h4>
        <table style="margin-left:-12px">
            <tr><td class="param">string <b>value</b></td><td>The string value to be escaped.</td></tr>
        </table>
        <h4>Return value</h4>
        <table style="margin-left:-12px">
            <tr><td class="param">string</td><td>The escaped string value.</td></tr>
        </table>
    </dd>
    <dd>
        <pre><code class="JS">var escapedValue = Database.escape(value);</code></pre>
    </dd>

    <h2><a name="DatabaseTransaction">DatabaseTransaction</a></h2>
    <dd>
        An object representing a database transaction. It can be created using <a href="#Database">Database</a>.<a href="#transaction">transaction</a>.
    </dd>
    <dd>
        In general transactions block the database connection for other operations. To avoid blocking the database connection permanently make sure that your code
        <ul>
            <li>starts the transaction right away, using <a href="#DatabaseTransaction_begin">begin</a></li>
            <li>finishes the transaction at some point, using <a href="#DatabaseTransaction_commit">commit</a> or <a href="#DatabaseTransaction_rollback">rollback</a></li>
        </ul>
    </dd>

    <a name="DatabaseTransaction_begin"><div class="fnhead" style="margin-top:5px">begin</div></a>
    <dd>
        Starts the transaction, giving an optional lock statement.
        <h4>Parameters</h4>
        <table style="margin-left:-12px">
            <tr><td class="param">lockStatement</td><td>An optional lock statement that shall be used for the database transaction.</td></tr>
        </table>
        <h4>Return value</h4>
        <table style="margin-left:-12px">
            <tr><td class="param"><a href="#DatabaseOperation">DatabaseOperation</a></td><td>The object representing the database query.</td></tr>
        </table>
    </dd>
    <dd>
        <pre><code class="JS">var transaction = Database.transaction();
transaction.begin("LOCK TABLE users IN ACCESS EXCLUSIVE MODE")
    .oncomplete(function() { })
    .onerror(function(error, errorText, dbErrorCode) { });</code></pre>
    </dd>

    <a name="DatabaseTransaction_commit"><div class="fnhead" style="margin-top:5px">commit</div></a>
    <dd>
        Commits all operaions done in the context of the <a href="#DatabaseTransaction">DatabaseTransaction</a> and deletes the object.
        <h4>Return value</h4>
        <table style="margin-left:-12px">
            <tr><td class="param"><a href="#DatabaseOperation">DatabaseOperation</a></td><td>The object representing the database operation.</td></tr>
        </table>
    </dd>
    <dd>
        <pre><code class="JS">transaction.commit()
    .oncomplete(function() { })
    .onerror(function(error, errorText, dbErrorCode) { });</code></pre>
    </dd>

    <a name="DatabaseTransaction_rollback"><div class="fnhead" style="margin-top:5px">rollback</div></a>
    <dd>
        Rolls-back all operations previously done in the context of the <a href="#DatabaseTransaction">DatabaseTransaction</a> and deletes the object.
        <h4>Return value</h4>
        <table style="margin-left:-12px">
            <tr><td class="param"><a href="#DatabaseOperation">DatabaseOperation</a></td><td>The object representing the database operation.</td></tr>
        </table>
    </dd>
    <dd>
        <pre><code class="JS">transaction.rollback()
    .oncomplete(function() { })
    .onerror(function(error, errorText, dbErrorCode) { });</code></pre>
    </dd>

    <a name="DatabaseTransaction_insert"><div class="fnhead" style="margin-top:5px">insert</div></a>
    <dd>
        Starts an SQL insert query.
        <h4>Parameters</h4>
        <table style="margin-left:-12px">
            <tr><td class="param">query</td><td>The SQL query. Note that the library will append " RETURNING id;" to the string.</td></tr>
        </table>
        <h4>Return value</h4>
        <table style="margin-left:-12px">
            <tr><td class="param"><a href="#DatabaseOperation">DatabaseOperation</a></td><td>The object representing the database operation.</td></tr>
        </table>
    </dd>
    <dd>
        <pre><code class="JS">transaction.insert("INSERT INTO users (sip, domain) VALUES ('alice','example.com')")
    .oncomplete(function(id) { })
    .onerror(function(error, errorText, dbErrorCode) { });</code></pre>
    </dd>

    <a name="DatabaseTransaction_exec"><div class="fnhead" style="margin-top:5px">exec</div></a>
    <dd>
        Starts a general SQL query.
        <h4>Parameters</h4>
        <table style="margin-left:-12px">
            <tr><td class="param">query</td><td>The SQL query.</td></tr>
        </table>
        <h4>Return value</h4>
        <table style="margin-left:-12px">
            <tr><td class="param"><a href="#DatabaseOperation">DatabaseOperation</a></td><td>The object representing the database operation.</td></tr>
        </table>
    </dd>
    <dd>
        <pre><code class="JS">transaction.exec("SELECT * FROM users")
    .oncomplete(function(data) { })
    .onerror(function(error, errorText, dbErrorCode) { });</code></pre>
    </dd>

    <h2><a name="DatabaseOperation">DatabaseOperation</a></h2>
    An object that represents a gerneral database operation. It is returned by all functions of <a href="#Database">Database</a> and <a href="#DatabaseTransaction">DatabaseTransaction</a> that trigger asynchronous operations.
    The object can be used to set callbacks for success or failure.

    <a name="DatabaseOperation_oncomplete"><div class="fnhead" style="margin-top:5px">oncomplete</div></a>
    <dd>
        Sets a callback function that shall be called, when the operation is completed.
        <h4>Parameters</h4>
        <table style="margin-left:-12px">
            <tr><td class="param">function <b>callback</b>(...)</td><td>Called when the operation is complete.</td></tr>
            <tr>
                <td></td>
                <td>
                    The callback has different parameters depending on the type of operation.
                    <ul>
                        <li>"id" for insert operations - the nummeric id of the created row.</li>
                        <li>"data" for exec operations - an array of objects representing the returned rows.</li>
                        <li>no parameters for the other operations</li>
                    </ul>
                </td>
            </tr>
        </table>
        <h4>Return value</h4>
        <table style="margin-left:-12px">
            <tr><td class="param"><a href="#DatabaseOperation">DatabaseOperation</a></td><td>A reference to the object itself. Useful for method chaining.</td></tr>
        </table>
    </dd>
    <dd>
        <pre><code class="JS">Database.insert("INSERT INTO users (sip, domain) VALUES ('alice','example.com')")
    .oncomplete(function(id) { log("created id=" + id); })
    .onerror(function(error, errorText, dbErrorCode) {});</code></pre>
    </dd>
    <dd>
        <pre><code class="JS">Database.exec("SELECT * FROM users")
    .oncomplete(function(data) { log("result=" + JSON.stringify(data, null, 4)); })
    .onerror(function(error, errorText, dbErrorCode) {});</code></pre>
    </dd>
    <dd>
        <pre><code class="JS">transaction.begin("LOCK TABLE users IN ACCESS EXCLUSIVE MODE")
    .oncomplete(function() {})
    .onerror(function(error, errorText, dbErrorCode) {});</code></pre>
    </dd>
    <dd>
        <pre><code class="JS">transaction.commit()
    .oncomplete(function() {})
    .onerror(function(error, errorText, dbErrorCode) {});</code></pre>
    </dd>
    <dd>
        <pre><code class="JS">transaction.rollback()
    .oncomplete(function() {})
    .onerror(function(error, errorText, dbErrorCode) {});</code></pre>
    </dd>

    <a name="DatabaseOperation_onerror"><div class="fnhead" style="margin-top:5px">onerror</div></a>
    <dd>
        Sets a callback function that shall be called, if the operation has failed.
        <h4>Parameters</h4>
        <table style="margin-left:-12px">
            <tr>
                <td class="param">function <b>callback</b>(error, errorText, dbErrorCode)</td>
                <td>
                    Called if the operation has failed. <br/>
                    <dl>
                        <dt>error</dt>
                        <dd>A string representation of <a href="../../sdk/common/interface/database.htm#db_error_t">db_error_t</a>.</dd>
                        <dt>errorText</dt>
                        <dd>A descriptive text that might be useful for debugging.</dd>
                        <dt>dbErrorCode</dt>
                        <dd>The error code returned by the underlying database server. The value is dependent on the used database server (for example postgreSQL) and its version.</dd>
                    </dl>
                </td>
            </tr>
        </table>
        <h4>Return value</h4>
        <table style="margin-left:-12px">
            <tr><td class="param"><a href="#DatabaseOperation">DatabaseOperation</a></td><td>A reference to the object itself. Useful for method chaining.</td></tr>
        </table>
    </dd>
    <dd>
        <pre><code class="JS">Database.insert("INSERT INTO users (sip, domain) VALUES ('alice','example.com')")
    .oncomplete(function(id) { log("created id=" + id); })
    .onerror(function(error, errorText, dbErrorCode) {});</code></pre>
    </dd>
    <dd>
        <pre><code class="JS">Database.exec("SELECT * FROM users")
    .oncomplete(function(data) { log("result=" + JSON.stringify(data, null, 4)); })
    .onerror(function(error, errorText, dbErrorCode) {});</code></pre>
    </dd>
    <dd>
        <pre><code class="JS">transaction.begin("LOCK TABLE users IN ACCESS EXCLUSIVE MODE")
    .oncomplete(function() {})
    .onerror(function(error, errorText, dbErrorCode) {});</code></pre>
    </dd>
    <dd>
        <pre><code class="JS">transaction.commit()
    .oncomplete(function() {})
    .onerror(function(error, errorText, dbErrorCode) {});</code></pre>
    </dd>
    <dd>
        <pre><code class="JS">transaction.rollback()
    .oncomplete(function() {})
    .onerror(function(error, errorText, dbErrorCode) {});</code></pre>
    </dd>


    <h3><a name="Example-Transaction">Example: Using database transactions</a></h3>
    <dd>
        This examples demonstrates the usage of database transaction by implementing a money withdrawal from the balance of one user to the balance of another user.
        <ul>
            <li>Read the balance of UserA and check if the balance contains enough credits.</li>
            <li>Read the balance of UserB.</li>
            <li>Calculate the new balances.</li>
            <li>Write the balance of UserA.</li>
            <li>Write the balance of UserB.</li>
        </ul>
        If one of the sub-operations fail, the entire transaction shall fail. Some of the sub-operations could be done with SQL only, like calculating the new balances. 
        But for demonstrational purposes we will do it in the JavaScript code.
    </dd>
    <h4>Definition of the used table in the config.json</h4>
    <pre><code class="JS">{
    "database": {
        "init": [
            {

                "cmd": "table",
                "name": "users",
                "init": [
                    {
                        "cmd": "column",
                        "name": "id",
                        "type": "BIGSERIAL PRIMARY KEY NOT NULL"
                    },
                    {
                        "cmd": "column",
                        "name": "sip",
                        "type": "VARCHAR(128) UNIQUE NOT NULL"
                    },
                    {
                        "cmd": "column",
                        "name": "balance",
                        "type": "INTEGER"
                    }
                ]
            }
        ]
    }
}</code></pre>

<h4>Code example reading and writing bytea (hex) data type values.</h4>
    <pre><code class="JS">/*
                          Table "public.binary_data"
 Column |  Type  | Collation | Nullable |                Default
--------+--------+-----------+----------+----------------------------------------
 id     | bigint |           | not null | nextval('files_data_id_seq'::regclass)
 data   | bytea  |           |          |
id   | data
-----+ --------
1    | \x313233
*/
Database.exec("SELECT data FROM binary_data;")
    .oncomplete(function (dataset) {
        var string = Encoding.binToString(dataset[0].data);
        log(string); // 123
    })
    .onerror(function (error, errorText, dbErrorCode) { });
var bin = Encoding.stringToBin("456");
var hexstring = Encoding.binToHex(bin); // 343536
Database.insert("INSERT INTO binary_data (data) VALUES ('\\x" + hexstring + "')") // \x343536
    .oncomplete(function (id) { })
    .onerror(function (error, errorText, dbErrorCode) { });</pre></code>

   <h4>Code example using nested callback syntax.</h4>
    <pre><code class="JS">function withdraw(userA, userB, amount, success, error) {
    var balanceA = 0;
    var balanceB = 0;
    var transaction = Database.transaction();
  
    transaction.begin("LOCK TABLE users IN ACCESS EXCLUSIVE MODE").onerror(error).oncomplete(function() {
        transaction.exec("SELECT balance FROM users WHERE sip='" + Database.escape(userA) + "'").onerror(rollback).oncomplete(function(data) {
            if (data.length == 0 || data[0].balance < amount) rollback();
            else {
                balanceA = data[0].balance;
                transaction.exec("SELECT balance FROM users WHERE sip='" + Database.escape(userB) + "'").onerror(rollback).oncomplete(function(data) {
                    if (data.length == 0) rollback();
                    else {
                        balanceB = data[0].balance;
                        balanceA -= amount;
                        balanceB += amount;
                        transaction.exec("UPDATE users SET balance=" + balanceA + " WHERE sip='" + Database.escape(userA) + "'").onerror(rollback).oncomplete(function() {
                            transaction.exec("UPDATE users SET balance=" + balanceB + " WHERE sip='" + Database.escape(userB) + "'").onerror(rollback).oncomplete(function() {
                                transaction.commit().oncomplete(success).onerror(error);
                            });
                        });
                    }
                });
            }
        });
    });

    function rollback() {
        transaction.rollback().oncomplete(error).onerror(error);
    }
}</pre></code>

    <h4>Code example using a state machine pattern.</h4>
    <pre><code class="JS">function withdraw(userA, userB, amount, success, error) {
    var balanceA = 0;
    var balanceB = 0;
    var transaction = Database.transaction();

    transaction.begin("LOCK TABLE users IN ACCESS EXCLUSIVE MODE").onerror(error).oncomplete(state1);

    function state1() {
        transaction.exec("SELECT balance FROM users WHERE sip='" + Database.escape(userA) + "'").onerror(rollback).oncomplete(state2);
    }

    function state2(data) {
        if (data.length > 0 && data[0].balance >= amount) {
            balanceA = data[0].balance;
            transaction.exec("SELECT balance FROM users WHERE sip='" + Database.escape(userB) + "'").onerror(rollback).oncomplete(state3);
        }
        else rollback();
    }

    function state3(data) {
        if (data.length > 0) {
            balanceB = data[0].balance;
            balanceA -= amount;
            balanceB += amount;
            transaction.exec("UPDATE users SET balance=" + balanceA + " WHERE sip='" + Database.escape(userA) + "'").onerror(rollback).oncomplete(state4);
        }
        else rollback();
    }

    function state4() {
        transaction.exec("UPDATE users SET balance=" + balanceB + " WHERE sip='" + Database.escape(userB) + "'").onerror(rollback).oncomplete(state5);
    }

    function state5() {
        transaction.commit().oncomplete(success).onerror(error);
    }

    function rollback() {
        transaction.rollback().oncomplete(error).onerror(error);
    }
}</pre></code>

</body>
</html>
