<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title>innovaphone SDK - Crypto</title>
    <link rel="stylesheet" href="../../web1/doc/innovaphone.doc.css" type="text/css" />
    <link rel="stylesheet" href="../../web1/doc/vs.css">
    <script src="../../web1/doc/highlight.pack.js"></script>
    <script>hljs.initHighlightingOnLoad();</script>
</head>

<body>
    <h1>Crypto</h1>
    <p>
        This document describes the Crypto library available in the JavaScript environment for app serivices.
    </p>

    <h2>Table of content</h2>
    <table>
        <tr>
            <td><b>Object</b></td>
            <td><b><a href="#Crypto">Crypto</a></b><br /></td>
        </tr>
        <tr>
            <td><b>Functions</b></td>
            <td>
                <a href="#hash">hash</a><br />
                <a href="#hmac">hmac</a><br />
                <a href="#cipher">cipher</a><br />
                <br />
            </td>
        </tr>
        <tr>
            <td><b>Object</b></td>
            <td>
                <b><a href="#Hash">Hash</a></b><br />
            </td>
        </tr>
        <tr>
            <td><b>Functions</b></td>
            <td>
                <a href="#hash-update">update</a><br />
                <a href="#hash-final">final</a><br />
                <br />
            </td>
        </tr>
        <tr>
            <td><b>Object</b></td>
            <td>
                <b><a href="#Hmac">Hmac</a></b><br />
            </td>
        </tr>
        <tr>
            <td><b>Functions</b></td>
            <td>
                <a href="#hmac-update">update</a><br />
                <a href="#hmac-final">final</a><br />
                <br />
            </td>
        </tr>
        <tr>
            <td><b>Object</b></td>
            <td>
                <b><a href="#Cipher">Cipher</a></b><br />
            </td>
        </tr>
        <tr>
            <td><b>Members</b></td>
            <td>
                <a href="#iv">iv</a><br />
                <a href="#getIv">getIv</a><br />
                <a href="#crypt">crypt</a><br />
                <a href="#close">close</a><br />
                <br />
            </td>
        </tr>
        <tr>
            <td><b>Examples</b></td>
            <td>
                <a href="#Example">Encrypting and signing a JS object</a><br />
            </td>
        </tr>
    </table>

    <h2><a name="Crypto">Crypto</a></h2>

    <a name="hash"><div class="fnhead" style="margin-top:5px">hash</div></a>
    <dd>
        <p>
            Creates a <a href="Hash">Hash</a> object that can be used for the calculation of cryptographic hashes.
        </p>
        <p>
            The objects allocates persistent memory in the JavaScript Runtime until the <a href="#hash-final">final</a> function is called.
        </p>
        <h4>Parameters</h4>
        <table style="margin-left:-12px">
            <tr><td class="param">string <b>algorithm</b></td><td>The hash algorithm to be used. Supported values are "SHA224", "SHA256", "SHA384", "SHA512", "SHA1", "MD5", "MD4".</td></tr>
        </table>
        <h4>Return value</h4>
        <table style="margin-left:-12px">
            <tr><td class="param"><a href="#Hash">Hash</a></td><td>An object that can be used for the hash calculation.</td></tr>
        </table>
    </dd>
    <dd>
        <pre><code class="JS">var digest = Crypto.hash("SHA256").update("data1").update("data2").final();</code></pre>
    </dd>

    <a name="hmac"><div class="fnhead" style="margin-top:5px">hmac</div></a>
    <dd>
        <p>
            Creates a <a href="Hmac">Hmac</a> object that can be used for the calculation of a hash-based message authentication code.
        </p>
        <p>
            The objects allocates persistent memory in the JavaScript Runtime until the <a href="#hmac-final">final</a> function is called.
        </p>
        <h4>Parameters</h4>
        <table style="margin-left:-12px">
            <tr><td class="param">string <b>algorithm</b></td><td>The hash algorithm to be used. Supported values are "SHA224", "SHA256", "SHA384", "SHA512", "SHA1", "MD5", "MD4".</td></tr>
            <tr><td class="param">string/Uint8Array <b>key</b></td><td>The password or key that shall be used for the calculation.</td></tr>
        </table>
        <h4>Return value</h4>
        <table style="margin-left:-12px">
            <tr><td class="param"><a href="#Hmac">Hmac</a></td><td>An object that can be used for the HMAC calculation.</td></tr>
        </table>
    </dd>
    <dd>
        <pre><code class="JS">var mac = Crypto.hmac("SHA256","password").update("data1").update("data2").final();</code></pre>
    </dd>

    <a name="cipher"><div class="fnhead" style="margin-top:5px">cipher</div></a>
    <dd>
        <p>
            Creates a <a href="Cipher">Cipher</a> object that can be used for the encryption / decryption.
        </p>
        <p>
            The objects allocates persistent memory in the JavaScript Runtime until <a href="#close">close</a> or <a href="#crypt">crypt</a> with last=true is called.
        </p>
        <p>
            Note: Cryptography is non-trivial. It's easy to make small mistakes on application level that break security completely.
            Don't just use the library functions but make sure you have a good understanding how to use the specific algorithm and mode.
        </p>
        <h4>Parameters</h4>
        <table style="margin-left:-12px">
            <tr><td class="param">string <b>algorithm</b></td><td>The cryptographic algorithm to be used. Supported values are "AES", "RC4", "DES".</td></tr>
            <tr><td class="param">string <b>mode</b></td><td>The mode of operation to be used.<br />Supported modes for "AES" are "ECB", "CTR", "CBC", "CTS", "CFB". null defaults to "ECB".<br />Supported modes for "DES" are "CBC".<br />Use null for "RC4".</td></tr>
            <tr>
                <td class="param">string/Uint8Array <b>key</b></td>
                <td>
                    The key for encryption/decryption.<br />
                    For "AES" a key of 16 bytes (AES-128), 24 bytes (AES-192) or 32 bytes (AES-256) is needed. The function accepts both hexstrings and binary keys given as a Uint8Array.<br />
                    For "DES" a key of 8 bytes (64 bit) is needed. The function accepts both hexstrings and binary keys given as a Uint8Array.<br />
                    For "RC4" a key of arbitrary length can be used. It can be specified as a string (password) or as a binary key given as a Uint8Array.<br />
                    Important: Never reuse the same key for "RC4". As RC4 is a stream cipher, the key needs to be globally unique to maintain security.<br />
                    Important: Never reuse the same key/iv combination for "AES" in "CTR" mode. As AES-CTR is a stream cipher, the key/iv combination needs to be globally unique to maintain security.
                </td>
            </tr>
            <tr>
                <td class="param">bool <b>encrypt</b></td>
                <td>
                    true for encryption (default).<br />
                    false for decryption<br />
                    Note: For stream ciphers like RC4 or AES-CTR there is no difference between encryption and decryption, so both values give the same result.
                </td>
            </tr>
        </table>
        <h4>Return value</h4>
        <table style="margin-left:-12px">
            <tr><td class="param"><a href="#Cipher">cipher</a></td><td>An object that can be used for performing the encryption or decryption.</td></tr>
        </table>
    </dd>
    <dd>
        <pre><code class="JS">var ciphertext = Crypto.cipher("RC4", null, "password").crypt("secretdata");
var decrypted = Crypto.cipher("RC4", null, "password").crypt(ciphertext);</code></pre>
    </dd>

    <h2><a name="Hash">Hash</a></h2>

    <a name="hash-update"><div class="fnhead" style="margin-top:5px">update</div></a>
    <dd>
        Includes a chunk of data into the hash calculation.
        <h4>Parameters</h4>
        <table style="margin-left:-12px">
            <tr><td class="param">string/Uint8Array <b>key</b></td><td>The input data. The function accepts both strings and binary data as Uint8Array.</td></tr>
        </table>
        <h4>Return value</h4>
        <table style="margin-left:-12px">
            <tr><td class="param"><a href="#Hash">Hash</a></td><td>A reference to the object itself. Useful for method chaining.</td></tr>
        </table>
    </dd>

    <a name="hash-final"><div class="fnhead" style="margin-top:5px">final</div></a>
    <dd>
        Caluclates the hash value.
        <h4>Parameters</h4>
        <table style="margin-left:-12px">
            <tr><td class="param">bool <b>binary</b></td><td>Optional, defaulting to false. Specifies if the function should return the hash value as a hexstring or as a binary Uint8Array.</td></tr>
        </table>
        <h4>Return value</h4>
        <table style="margin-left:-12px">
            <tr><td class="param">string/Uint8Array</td><td>The calculated hash value as a hexstring or Uint8Array, depending on the binary parameter.</td></tr>
        </table>
        <h4>Remarks</h4>
        <p>
            Calling this function will delete the object and free all associated memory in the JavaScript Runtime.
        </p>
    </dd>
    <dd>
        <pre><code class="JS">var digestHexString = Crypto.hash("SHA256").update("data1").update("data2").final();
var digestBinary = Crypto.hash("SHA256").update("data1").update("data2").final(true);</code></pre>
    </dd>

    <h2><a name="Hmac">Hmac</a></h2>

    <a name="hmac-update"><div class="fnhead" style="margin-top:5px">update</div></a>
    <dd>
        Includes a chunk of data into the HMAC calculation.
        <h4>Parameters</h4>
        <table style="margin-left:-12px">
            <tr><td class="param">string/Uint8Array <b>key</b></td><td>The input data. The function accepts both strings and binary data as Uint8Array.</td></tr>
        </table>
        <h4>Return value</h4>
        <table style="margin-left:-12px">
            <tr><td class="param"><a href="#Hmac">Hmac</a></td><td>A reference to the object itself. Useful for method chaining.</td></tr>
        </table>
    </dd>

    <a name="hmac-final"><div class="fnhead" style="margin-top:5px">final</div></a>
    <dd>
        Caluclates the HMAC value.
        <h4>Parameters</h4>
        <table style="margin-left:-12px">
            <tr><td class="param">bool <b>binary</b></td><td>Optional, defaulting to false. Specifies if the function should return the hash value as a hexstring or as a binary Uint8Array.</td></tr>
        </table>
        <h4>Return value</h4>
        <table style="margin-left:-12px">
            <tr><td class="param">string/Uint8Array</td><td>The calculated hash value as a hexstring or Uint8Array, depending on the binary parameter.</td></tr>
        </table>
        <h4>Remarks</h4>
        <p>
            Calling this function will delete the object and free all associated memory in the JavaScript Runtime.
        </p>
    </dd>
    <dd>
        <pre><code class="JS">var hacHexString = Crypto.hmac("SHA256","password").update("data1").update("data2").final();
var hmacBinary = Crypto.hmac("SHA256","password").update("data1").update("data2").final(true);</code></pre>
    </dd>

    <h2><a name="Cipher">Cipher</a></h2>

    <a name="iv"><div class="fnhead" style="margin-top:5px">iv</div></a>
    <dd>
        <p>
            Sets an explicit initialization vector. If the function is never called, an IV consisting of null bytes is used.<br />
            The following modes of operation use an initialization vector: "CTR", "CFB", "CBC", "CTS".<br />
            "AES" uses an initialization vector of 16 bytes<br />
            "DES" uses an initialization vecrot of 8 bytes<br />
        </p>
        <h4>Parameters</h4>
        <table style="margin-left:-12px">
            <tr><td class="param">string/Uint8Array <b>iv</b></td><td>The initialzation vector to be used from the next <a href="#crypt">crypt</a> operation. The function accepts both hexstrings and binary data as Uint8Array.</td></tr>
        </table>
        <h4>Return value</h4>
        <table style="margin-left:-12px">
            <tr><td class="param"><a href="#Cipher">cipher</a></td><td>A reference to the object itself. Useful for method chaining.</td></tr>
        </table>
    </dd>

    <a name="getIv"><div class="fnhead" style="margin-top:5px">getIv</div></a>
    <dd>
        <p>
            Returns the current IV.
        </p>
        <h4>Parameters</h4>
        <table style="margin-left:-12px">
            <tr><td class="param">bool <b>binary</b></td><td>Optional, defaulting to false. Specifies if the function should return a hexstring or a binary Uint8Array.</td></tr>
        </table>
        <h4>Return value</h4>
        <table style="margin-left:-12px">
            <tr><td class="param">string/Uint8Array</td><td>The current IV value as a hexstring or Uint8Array, depending on the binary parameter.</td></tr>
        </table>
    </dd>

    <a name="crypt"><div class="fnhead" style="margin-top:5px">crypt</div></a>
    <dd>
        Encrypts or decrypts a chunk of data.
        <h4>Parameters</h4>
        <table style="margin-left:-12px">
            <tr>
                <td class="param">string/Uint8Array <b>data</b></td>
                <td>
                    The data to be encrypted/decrypted.<br />
                    For encryption the functions accepts strings or binary data as Uint8Array.<br />
                    For decryption the function accepts hexstrings or binary data as Uint8Array.<br />
                    Depending on the algorithm and mode of operation there are restrictions on the data size that can be processed.<br />
                    "RC4" allows arbitrary data sizes.<br />
                    "AES" in "CTR" or "CTS" mode allow arbitary data sizes.<br />
                    All other modes of "AES" expect multiples of 16 bytes<br />
                    "DES" expects multiples of 8 bytes<br />
                </td>
            </tr>
            <tr>
                <td class="param">bool <b>binary</b></td>
                <td>
                    Optional, defaulting to false.<br />
                    If false, the function will return a hexstring for encryption and a string for decryption.<br />
                    Otherwise the function will return binary data as a Uint8Array.
                </td>
            </tr>
            <tr>
                <td class="param">bool <b>last</b></td>
                <td>
                    Optional, defaulting to true.<br />
                    If true, the <a href="#Cipher">Cipher</a> object will be deleted after the operation, along with all associated data in the JavaScript Runtime.<br />
                    if false, the object can be reused for encrypting / decrypting additional chunks of data.
                </td>
            </tr>
        </table>
        <h4>Return value</h4>
        <table style="margin-left:-12px">
            <tr><td class="param">string/Uint8Array</td><td>The encrypted/decrypted data a string/hexstring or Uint8Array, depending on the binary parameter.</td></tr>
        </table>
    </dd>
    <dd>
        <pre><code class="JS">var key = "73757065727375706572736563726574";
var iv = "00000000000000000000000000000000";
var plaintext = "This is the secret text to be encrypted";

// encryption using AES-128 in CTR mode
var ciphertext = Crypto.cipher("AES", "CTR", key, true).iv(iv).crypt(plaintext);

// decryption using AES-128 in CTR mode
var decrypted = Crypto.cipher("AES", "CTR", key, false).iv(iv).crypt(ciphertext);

// now decrypted contains the plain text again</code></pre>
    </dd>

    <a name="close"><div class="fnhead" style="margin-top:5px">close</div></a>
    <dd>
        Deletes the object and frees all associated data in the JavaScript Runtime. Can be used to dispose the object, as an alternative to calling <a href="#close">close</a> with last set to true.
    </dd>

    <h2><a name="Example">Example: Encrypting and signing a JS object</a></h2>
    <dd>
        Let's make up an example that brings everything together. For that let's create a function that does the following:
        <ul>
            <li>Serialize an object to a JSON string.</li>
            <li>Create a message authentication code for the string using HMAC-SHA256 and a secret passphrase.</li>
            <li>Encrypt the string using AES-256 in CTR mode with the secret passphrase.</li>
            <li>Construct an object that includes all information needed to decrypt again - except for the secret passphrase of course.</li>
        </ul>
    </dd>
    <pre><code class="JS">function encryptObject(obj, passphrase) {
    // serialize the object
    var plaintext = JSON.stringify(obj);
    // calculate HMAC
    var hmac = Crypto.hmac("SHA256", passphrase).update(plaintext).final();
    // create random 128-Bit IV
    var iv = Random.bytes(16);
    // create 256-Bit encryption key from passphrase by hashing it using SHA256
    var key = Crypto.hash("SHA256").update(passphrase).final();
    // encrypt
    var ciphertext = Crypto.cipher("AES", "CTR", key, true).iv(iv).crypt(plaintext);
    
    return {
        iv: iv,
        data: ciphertext,
        hmac: hmac
    };
}
</code></pre>
    <dd>
        Next, let's create the corresponding decryption function.
        <ul>
            <li>Read all information from the object.</li>
            <li>Decrypt using AES-256 in CTR mode with the secret passphrase.</li>
            <li>Verify the decrypted data using HMAC-SHA256 and the secret passphrase.</li>
            <li>Restore the original object.</li>
        </ul>
    </dd>
    <pre><code class="JS">function decryptObject(obj, passphrase) {
    if (!obj || !obj.iv || !obj.data || !obj.hmac) return null;

    // create 256-Bit encryption key from passphrase by hashing it using SHA256
    var key = Crypto.hash("SHA256").update(passphrase).final();
    // decrypt
    var plaintext = Crypto.cipher("AES", "CTR", key, false).iv(obj.iv).crypt(obj.data);
    // calculate HMAC
    var hmac = Crypto.hmac("SHA256", passphrase).update(plaintext).final();

    // check if decryption was successfull
    if (hmac == obj.hmac) {
        return JSON.parse(plaintext);
    }
    
    return null;
}
</code></pre>
    <dd>
        We can test it with the following code.
    </dd>
    <pre><code class="JS">
var passphrase = "D4s 1s7 d4s H4us v0m N1c0l4us!!1";

var input = { text: "Hi, this is top secret. We should protect it.", x: 42 };
log("input:     " + JSON.stringify(input));

var encrypted = encryptObject(input, passphrase);
log("encrypted: " + JSON.stringify(encrypted));

var decrypted = decryptObject(encrypted, passphrase);
log("decrypted: " + JSON.stringify(decrypted));
</code></pre>
    <dd>
        In the log we can see an output like that:
    </dd>
    <pre><code class="JS">
JS: input:     {"text":"Hi, this is top secret. We should protect it.","x":42}
JS: encrypted: {"iv":"357bf81d63418a6fdedce56558667d29","data":"f0a454da39d7306770afc7ea781904b2d49b4adb9d4f1790898d28145503a8d2183e4c53ec4e696a95938ee1c25bf5d29b24851c45a31fc6e13842887b267c","hmac":"9502652073243900ae42a4b864b05d17c3ec18b0983e3aa9ae76099be5642bac"}
JS: decrypted: {"text":"Hi, this is top secret. We should protect it.","x":42}
</code></pre>

</body>
</html>
