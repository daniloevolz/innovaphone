<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title>com.innovaphone.manager (App API)</title>
    <link rel="stylesheet" href="../../web1/doc/innovaphone.doc.css" type="text/css" />
    <link rel="stylesheet" href="../../web1/doc/vs.css">
    <script src="../../web1/doc/highlight.pack.js"></script>
    <script>hljs.initHighlightingOnLoad();</script>
</head>

<body>
    <h1>com.innovaphone.manager (AP Manager API)</h1>
    <p>
        This API is used to add APs (App Platforms) to a PBX. When the AP is added, it allows to find the App Instances provided by the AP and to configure the PBX to use these
        App Instances. <br />
        In addition to that, a plugin for the AP Manager (app installer) is available where new apps can be installed, updated or uninstalled. <br />
        The API consists of the following functional blocks.
    </p>
    <dl>
        <dt><a href="#ap-domain-management">AP Domain Management</a></dt>
        <dd>
            A mechanism to add a new AP to a PBX. For this a random password is set for
            the domain of the PBX inside the Manager, so that a AP object using this password
            can be installed on the PBX. For this an AppWebsocket connection with a default (dummy)
            password is established. A new domain can be created and authenticated with the AP Manager password.
        </dd>
        <dt><a href="#ap-instance-management">AP Instance Management</a></dt>
        <dd>
            The AP object in the PBX provides an API as hidden App for other Apps within
            the client. This API is used to announce all the App Instances available for
            the domain and provides functions to configure domain passwords on a given
            App Instance.
        </dd>
        <dt><a href="#ap-plugin-appinstaller">AP Manager Plugin - app installer</a></dt>
        <dd>
            The app installer plugin provieds a view of the AP Manager appstore and allows to install, update or uninstall
            apps. New instances are implicity created (or removed) with the corresponding domain.
            After the app is installed, the instance can be configured on the PBX through its respective plugin.
        </dd>
    </dl>

    <h2><a name="ap-domain-management" />AP Domain Management<a></a></h2>

    <p>
        An AppWebsocket connnection with a default password "-" is used for this interface.
    </p>

    <h3>Login</h3>

    <p>
        Normal AppWebsocket Login is used.
    </p>

    <dl>
        <dt>url</dt>
        <dd>ws(s)://&lt;AP host address&gt;/manager/manager-domain</dd>
        <dt>password</dt>
        <dd>"-"</dd>
        <dt>domain</dt>
        <dd>The PBX domain</dd>
    </dl>

    <h3>RegisterDomain</h3>

    <pre><code class="json">
    {
    "mt": "RegisterDomain",
    "pwd": string
    "managerPwd": string
    }
</code></pre><br />

             <p>
                 With this message a new domain is registered on the AP. For security reasons, the AP Manager password must be provided so that the domian is added.
                 <br />
                 The domain is the domain used for the login.
             </p>

    <dl>
        <dt>pwd</dt>
        <dd>Password to be set</dd>
        <dt>managerPwd</dt>
        <dd>AP Manager password</dd>
    </dl>

    <h3>RegisterDomainResult</h3>

    <pre><code class="json">{
    "mt": "RegisterDomainResult"
}</code></pre><br />

    <p>
        Message sent by the AP as response to RegisterDomain
    </p>

    <h2><a name="ap-instance-management" />AP Instance Management</a></h2>

    <p>
        Instance management is done through myApps API com.innovaphone.manager. This API is
        provided by a hidden App provided to the PBX when the Websocket Connection to
        http(s)://&lt;AP host address&gt;/manager/manager-domain-api is opened from the AP object
        in the PBX.
    </p>

    <h3>ManagerControls</h3>

    <pre><code class="json">{
    "mt": "ManagerControls"
}</code></pre><br />

    <p>
        The ManagerControls message is used to read the list of PBX Manager plugins available
        on the given domain
    </p>

    <h3>ManagerControlsResult</h3>

    <pre><code class="json">{
    "mt": "ManagerControlsResult",
    "protocol": string,
    "ap": string,
    "apDn": string,
    "host": string,
    "controls": [<a href="#Control">&lt;Control&gt;</a>,...]
}</code></pre><br />

    <p>
        With this message the list of available PBX Manager plugins is returned
    </p>
    <dl>
        <dt>protocol</dt>
        <dd>http: or https:</dd>
        <dt>ap</dt>
        <dd>SIP URI user part of the AP object</dd>
        <dt>apDn</dt>
        <dd>Display name of the AP object</dd>
        <dt>host</dt>
        <dd>Host address of the AP</dd>
        <dt>controls</dt>
        <dd>
            Array of objects of type Control
        </dd>
    </dl>

    <a name="Objects"><h3>Objects</h3></a>

    <a name="Control"><div class="fnhead">Control</div></a>

    <pre><code class="json">{
    "api": [string,...]
    "uri": string,
    "png": string,
    "lang": string
}</code></pre>

    <p>
        Description of an PBX Manager plugin control
    </p>

    <dl>
        <dt>uri</dt>
        <dd>The relative URI of the plugin (.js)</dd>
        <dt>png</dt>
        <dd>The relatiive URI of the plugin icon (.png)</dd>
        <dt>lang</dt>
        <dd>
            The relative URI of a language file, with the reserved property "pluginTitle" for
            the title of the plugin.
        </dd>
    </dl>

    <h3>SetInstancePassword</h3>

    <pre><code class="json">{
    "mt": "SetInstancePassword",
    "path": string,
    "pwd": string
}</code></pre><br />

    <p>
        Used to set the password of an instance. On success, the instance is edited with the new password and an AppWebsocket connection can then be established.
    </p>
    <dl>
        <dt>path</dt>
        <dd>The webserver path used to identify the instance</dd>
        <dt>pwd</dt>
        <dd>The new password of the instance</dd>
    </dl>

    <h3>SetInstancePasswordResult</h3>
    <pre><code class="json">{
    "mt": "SetInstancePasswordResult",
    "error": string
}</code></pre><br />

    <p>
        Returns the result for SetInstancePassword
    </p>
    <dl>
        <dt>error</dt>
        <dd>If present the operation was not successful</dd>
    </dl>

    <h3>GetInstanceLogin</h3>

    <pre><code class="json">{
    "mt": "GetInstanceLogin",
    "path": string,
    "app": string,
    "challenge": string,
}</code></pre><br />

    <p>
        Used to get a login for a given instance. This maybe used in the fgetlogin callback of the
        AppWebsocket connection. With this it is possible to authenticate at instances without an
        App Object present in the PBX, just by having access to the App Platform Manager.
    </p>
    <dl>
        <dt>path</dt>
        <dd>
            The webserver path as configured for the instance. This is used to identify the instance
            for which a login is requested.
        </dd>
        <dt>app</dt>
        <dd>
            An App object name used for the login. Usually this has no meaning.
        </dd>
        <dt>challenge</dt>
        <dd>
            The challenge received from the instance to which a login is requested. This is received
            as argument of the fgetlogin callback of the AppWebsocket library.
        </dd>
    </dl>

    <h3>GetInstanceLoginResult</h3>

    <pre><code class="json">{
    "mt": "GetInstanceLoginResult",
    "app": string,
    "sip": string,
    "domain": string,
    "guid": string,
    "dn": string,
    "digest": string
}</code></pre><br />

    <p>
        The login, which can be used for the App Instance. This object can directly passed to the login
        function of the AppWebsocket library.
    </p>

    <h2><a name="ap-plugin-appinstaller" />AP Manager Plugin - app installer</a></h2>

    <p>
        The app installer plugin facilitates the management of apps and the configuration of the instances on the PBX.
    </p>

    <h3>GetManagerInfo</h3>

    <pre><code class="json">{
    "mt": "GetManagerInfo"
}</code></pre><br />

    <p>
        The GetManagerInfo message is used to retrieve information about the App Platform and AP Manager
    </p>

    <h3>GetManagerInfoResult</h3>

    <pre><code class="json">{
    "mt": "GetManagerInfoResult",
    "platform": string,
    "platformLabel": string,
    "build": string,
    "version": string,
    "label": string,
}</code></pre><br />

    <h3>AcceptUserAgreement</h3>

    <pre><code class="json">{
    "mt": "AcceptUserAgreement",
    "accept": boolean,
    "user": string
}</code></pre><br />
    <p>
        The AcceptUserAgreement message is needed to accept the AP Manager appstore user agreement and get access to the appstore.
    </p>
    <dl>
        <dt>accept</dt>
        <dd>
            to indicated that the user is agreement is accepted or not.
        </dd>
        <dt>user</dt>
        <dd>
            The logged in PBX user;
        </dd>
    </dl>

    <h3>AcceptUserAgreementResult</h3>

    <pre><code class="json">{
    "mt": "AcceptUserAgreementResult",
    "accepted": boolean
}</code></pre><br />

    <h3>CheckUserAgreement</h3>

    <pre><code class="json">{
    "mt": "CheckUserAgreement"
}</code></pre><br />
    <p>
        The CheckUserAgreement message checks if the user agreement of the AP Manager appstore is accepted or not.
    </p>

    <h3>CheckUserAgreementResult</h3>

    <pre><code class="json">{
    "mt": "CheckUserAgreementResult",
    "accepted": boolean
}</code></pre><br />

    <h3>RequestAppStore</h3>

    <pre><code class="json">{
    "mt": "RequestAppStore"
}</code></pre><br />
    <p>
        The RequestAppStore message requests all the apps available on the configured app store in the AP Manager
    </p>

    <h3>AppStoreServiceAdded</h3>

    <pre><code class="json">
    {
    "mt": "AppStoreServiceAdded",
    "id": string,
    "folder": string,
    "title": string,
    "manufacturer": string,
    "infourl": string,
    "logo": string,
    "versions": [],
    "state": {},
    "support": string,
    "requirement": string,
    "licenseInfo": string,
    "licenseType": string,
    "eula": string,
    "langs": [],
    "categories": [],
    "apps": []
}</code></pre><br />

    <h3>AppStoreResult</h3>
<pre><code class="json">{
    "mt": "AppStoreResult"
}</code></pre><br />

    <h3>InstallService</h3>

    <pre><code class="json"> {
    "mt": "InstallService",
    "appServiceID": string,
    "title": string,
    "folder": string,
    "binary": string,
    "manufacturer": string,
    "copy": [],
    "version": {
        "build": string,
        "label": string,
        "id": string,
        "compatibilty": string
    },
    "userAgreementAccepted": boolean,
    "domain": string
}</code></pre><br />
    <p>
        The InstallService message is used to install a new service on the AP. On success, a new instance with the same domain is implicitly added and started.<br />
        The instance can be configured on the PBX through its corresponding PBX Manager plugin.
    </p>

    <h3>ServiceInstalled</h3>

    <pre><code class="json">{
    "mt": "ServiceInstalled",
    "filename": string,
    "appServiceID": string,
    "title": string,
    "initilaStatus": boolean,
    "currentStatus": boolean,
    "manufacturere": string,
    "startTime": ulong64,
    "versions": []
 }</code></pre><br />

    <h3>InstallServiceResult</h3>
<pre><code class="json">{
    "mt": "InstallServiceResult",
    "error": string
}</code></pre><br />
    <p>
        Indicates whether an app service was successfully installed or not.
    </p>

    <h3>UpdateService</h3>

    <pre><code class="json"> {
    "mt": "InstallService",
    "appServiceID": string,
    "title": string,
    "folder": string,
    "binary": string,
    "manufacturer": string,
    "copy": [],
    "version": {
        "build": string,
        "label": string,
        "id": string,
        "compatibilty": string
    },
    "domain": string
}</code></pre><br />
    <p>
        The UpdateService message is used to update a service to any avialable version.
        The update would not be possible (through this plugin) if a service have multiple instances with different domains. <br />
        Updating the AP Manager and the Webserver app is also not possible.
    </p>

    <h3>ServiceUpdated</h3>

    <pre><code class="json">{
    "mt": "ServiceInstalled",
    "filename": string,
    "appServiceID": string,
    "title": string,
    "initilaStatus": boolean,
    "currentStatus": boolean,
    "manufacturere": string,
    "startTime": ulong64,
    "versions": []
 }</code></pre><br />

    <h3>UpdateServiceResult</h3>
<pre><code class="json">{
    "mt": "UpdateServiceResult",
    "error": string
}</code></pre><br />
    <p>
        Indicates whether an app service was successfully updated or not.
    </p>

    <h3>RemoveService</h3>

    <pre><code class="json"> {
    "mt": "InstallService",
    "appServiceID": string,
    "domain": string
}</code></pre><br />
    <p>
        The RemoveService message is used to uninstall a service. <br />
        The uninstall would only remove the corresponding instance with the specified domain. If no other instances are present, then the whole service is uninstalled.
    </p>

    <h3>ServiceRemoved</h3>

    <pre><code class="json">{
    "mt": "ServiceInstalled",
    "filename": string,
    "appServiceID": string
 }</code></pre><br />

    <h3>RemoveServiceResult</h3>
<pre><code class="json">{
    "mt": "RemoveServiceResult",
    "error": string
}</code></pre><br />
    <p>
        Indicates whether an app service was successfully uninstalled or not.
    </p>
</body>
</html>
