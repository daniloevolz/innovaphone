<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title>innovaphone SDK - JsonApi</title>
    <link rel="stylesheet" href="../../web1/doc/innovaphone.doc.css" type="text/css" />
    <link rel="stylesheet" href="../../web1/doc/vs.css">
    <script src="../../web1/doc/highlight.pack.js"></script>
    <script>hljs.initHighlightingOnLoad();</script>
</head>

<body>
    <h1>JsonApi</h1>
    <p>
        This document describes the JsonApi object in the JavaScript environment for app serivices.
    </p>
    <p>
        JSON APIs are used on incoming <a href="../appwebsocket/AppWebsocket.htm">AppWebsocket</a> connections to the app service. JSON APIs are identified by a string identifier. All websocket messages with the "api" attribute matching the identifier are routed to the corresponding JsonApi object.
    </p>

    <h2>Table of content</h2>
    <table>
        <tr>
            <td><b>Object</b></td>
            <td><b><a href="#JsonApi">JsonApi</a></b><br /></td>
        </tr>
        <tr>
            <td><b>Functions</b></td>
            <td>
                <a href="#onconnected">onconnected</a><br />
                <br />
            </td>
        </tr>
        <tr>
            <td><b>Object</b></td>
            <td>
                <b><a href="#JsonApiConnection">JsonApiConnection</a></b><br />
            </td>
        </tr>
        <tr>
            <td><b>Members</b></td>
            <td>
                <a href="#domain">domain</a><br />
                <a href="#sip">sip</a><br />
                <a href="#dn">dn</a><br />
                <a href="#guid">guid</a><br />
                <a href="#app">app</a><br />
                <a href="#info">info</a><br />
                <a href="#unlicensed">unlicensed</a><br />
            </td>
        </tr>
        <tr>
            <td><b>Functions</b></td>
            <td>
                <a href="#onmessage">onmessage</a><br />
                <a href="#onclose">onclose</a><br />
                <a href="#send">send</a><br />
                <a href="#setFlowControl">setFlowControl</a><br />
                <a href="#messageComplete">messageComplete</a><br />
                <a href="#encrypt">encrypt</a><br />
                <a href="#decrypt">decrypt</a><br />
                <a href="#hash">hash</a><br />
                <br />
            </td>
        </tr>
    </table>

    <h2><a name="JsonApi">JsonApi</a></h2>

    <a name="JsonApi"><div class="fnhead" style="margin-top:5px">JsonApi</div></a>
    <dd>
        Constructor for creating and registering a JSON API.
        <h4>Parameters</h4>
        <table style="margin-left:-12px">
            <tr><td class="param">string <b>api</b></td><td>The identifier for the API.</td></tr>
        </table>
    </dd>
    <dd>
        <pre><code class="JS">var echoApi = new JsonApi("echo");</code></pre>
    </dd>

    <a name="onconnected"><div class="fnhead" style="margin-top:5px">onconnected</div></a>
    <dd>
        Registers a callback function that is invoked when a new AppWebsocket is connected that uses the API.
        <h4>Parameters</h4>
        <table style="margin-left:-12px">
            <tr><td class="param">function <b>callback</b>(<a name="JsonApiConnection">JsonApiConnection</a> conn)</td><td>The conn parameter passed with the callback can be used to receive and send API messages on the connection.</td></tr>
        </table>
        <h4>Return value</h4>
        <table style="margin-left:-12px">
            <tr><td class="param"><a href="#JsonApi">JsonApi</a></td><td>A reference to the object itself. Useful for method chaining.</td></tr>
        </table>
    </dd>
    <dd>
        <pre><code class="JS">new JsonApi("echo").onconnected(function(conn) {
    log("new echo API connection");
});</code></pre>
    </dd>

    <h2><a name="JsonApiConnection">JsonApiConnection</a></h2>

    <a name="domain"><div class="fnhead" style="margin-top:5px">domain</div></a>
    <dd>
        A string containing the domain of the logged-in user.
    </dd>
    <a name="sip"><div class="fnhead" style="margin-top:5px">sip</div></a>
    <dd>
        A string containing the sip of the logged-in user.
    </dd>
    <a name="dn"><div class="fnhead" style="margin-top:5px">dn</div></a>
    <dd>
        A string containing the display name of the logged-in user.  May be undefined.
    </dd>
    <a name="guid"><div class="fnhead" style="margin-top:5px">guid</div></a>
    <dd>
        A string containing the GUID of the logged-in user. May be undefined.
    </dd>
    <a name="app"><div class="fnhead" style="margin-top:5px">app</div></a>
    <dd>
        A string containing the app the user is authentcated for. For example this attribute can be used to distinguish between connections to user and admin apps.
    </dd>
    <a name="info"><div class="fnhead" style="margin-top:5px">info</div></a>
    <dd>
        A string containing the login info of the user. It contains a JSON structure that includes additional info like the PBX of the user.
    </dd>
    <a name="unlicensed"><div class="fnhead" style="margin-top:5px">unlicensed</div></a>
    <dd>
        A boolean that tells whether the logged-in user got a license for the related <a href="#app">app</a>.
    </dd>

    <dd>
        <pre><code class="JS">new JsonApi("echo").onconnected(function(conn) {
    conn.onmessage(function(msg) {
        var obj = JSON.parse(msg);
        if (obj.mt == "Echo") {
            conn.send(JSON.stringify({ api: "echo", mt: "EchoResult", src: obj.src }));
        }
    });
});</code></pre>
    </dd>

    <a name="onmessage"><div class="fnhead" style="margin-top:5px">onmessage</div></a>
    <dd>
        Registers a callback function that is invoked when receiving an API message
        <h4>Parameters</h4>
        <table style="margin-left:-12px">
            <tr><td class="param">function <b>callback</b>(string msg)</td><td>A string containg a JSON structure. Must be parsed using JSON.parse.</td></tr>
        </table>
        <h4>Return value</h4>
        <table style="margin-left:-12px">
            <tr><td class="param"><a href="#JsonApiConnection">JsonApiConnection</a></td><td>A reference to the object itself. Useful for method chaining.</td></tr>
        </table>
    </dd>
    <dd>
        <pre><code class="JS">new JsonApi("echo").onconnected(function(conn) {
    conn.onmessage(function(msg) {
        var obj = JSON.parse(msg);
        if (obj.mt == "Echo") {
            conn.send(JSON.stringify({ api: "echo", mt: "EchoResult", src: obj.src }));
        }
    });
});</code></pre>
    </dd>

    <a name="onclose"><div class="fnhead" style="margin-top:5px">onclose</div></a>
    <dd>
        Registers a callback function that is invoked when the AppWebsocket connection was closed by the client.
        <h4>Parameters</h4>
        <table style="margin-left:-12px">
            <tr><td class="param">function <b>callback</b>()</td><td>The callback that shall be invoked when the connection was closed.</td></tr>
        </table>
        <h4>Return value</h4>
        <table style="margin-left:-12px">
            <tr><td class="param"><a href="#JsonApiConnection">JsonApiConnection</a></td><td>A reference to the object itself. Useful for method chaining.</td></tr>
        </table>
    </dd>
    <dd>
        <pre><code class="JS">new JsonApi("echo").onconnected(function(conn) {
    log("connected");
    conn.onclose(function() {
        log("closed");
    });
});</code></pre>
    </dd>

    <a name="send"><div class="fnhead" style="margin-top:5px">send</div></a>
    <dd>
        Sends a JSON message.
        <h4>Parameters</h4>
        <table style="margin-left:-12px">
            <tr><td class="param">string <b>message</b></td><td>A string (max. length 65535) containing a JSON structure that represents the API message.</td></tr>
        </table>
        <h4>Return value</h4>
        <table style="margin-left:-12px">
            <tr><td class="param"><a href="#JsonApiConnection">JsonApiConnection</a></td><td>A reference to the object itself. Useful for method chaining.</td></tr>
        </table>
    </dd>
    <dd>
        <pre><code class="JS">conn.send(JSON.stringify({ api: "echo", mt: "EchoResult" }));</code></pre>
    </dd>

    <a name="setFlowControl"><div class="fnhead" style="margin-top:5px">setFlowControl</div></a>
    <dd>
        Tells the library that it wants to use flow control. That means that after receiving the <a href="#onmessage">onmessage</a> callback, the library should deliver no more messages until the application has called <a href="#messageComplete">messageComplete</a>
        <h4>Parameters</h4>
        <table style="margin-left:-12px">
            <tr><td class="param">bool <b>on</b></td><td>true if flow control shall be used. false if flow control should not be used.</td></tr>
        </table>
        <h4>Return value</h4>
        <table style="margin-left:-12px">
            <tr><td class="param"><a href="#JsonApiConnection">JsonApiConnection</a></td><td>A reference to the object itself. Useful for method chaining.</td></tr>
        </table>
    </dd>
    <dd>
        <pre><code class="JS">new JsonApi("echo").onconnected(function(conn) {
    conn.setFlowControl(true)
        .onmessage(function(msg) {
            var obj = JSON.parse(msg);
            if (obj.mt == "Echo") {
                conn.send(JSON.stringify({ api: "echo", mt: "EchoResult", src: obj.src }));
            }
            conn.messageComplete();
        });
});</code></pre>
    </dd>

    <a name="messageComplete"><div class="fnhead" style="margin-top:5px">messageComplete</div></a>
    <dd>
        Tells the library that the application is ready to receive the next message using the <a href="#onmessage">onmessage</a> callback.
        <h4>Return value</h4>
        <table style="margin-left:-12px">
            <tr><td class="param"><a href="#JsonApiConnection">JsonApiConnection</a></td><td>A reference to the object itself. Useful for method chaining.</td></tr>
        </table>
    </dd>
    <dd>
        <pre><code class="JS">new JsonApi("echo").onconnected(function(conn) {
    conn.setFlowControl(true)
        .onmessage(function(msg) {
            var obj = JSON.parse(msg);
            if (obj.mt == "Echo") {
                conn.send(JSON.stringify({ api: "echo", mt: "EchoResult", src: obj.src }));
            }
            conn.messageComplete();
        });
});</code></pre>
    </dd>

    <a name="encrypt"><div class="fnhead" style="margin-top:5px">encrypt</div></a>
    <dd>
        Encrypts a string using the shared secret of the connection and a random seed.
        <h4>Parameters</h4>
        <table style="margin-left:-12px">
            <tr><td class="param">string <b>seed</b></td><td>A seed value that shall be unique for each call. The seed is needed by the remote party for decryption.</td></tr>
            <tr><td class="param">string <b>data</b></td><td>The string to be encrypted.</td></tr>
        </table>
        <h4>Return value</h4>
        <table style="margin-left:-12px">
            <tr><td class="param">string</td><td>The encrypted string.</td></tr>
        </table>
    </dd>
    <dd>
        <pre><code class="JS">var seed = "some seed";
var secret = "some secret text";
var encryptedText = conn.encrypt(seed, secret);
conn.send(JSON.stringify({ mt: "SomeMessage", seed: seed, encryptedText: encryptedText }));</code></pre>
    </dd>

    <a name="decrypt"><div class="fnhead" style="margin-top:5px">decrypt</div></a>
    <dd>
        Decrypts a string using the shared secret of the connection and a random seed.
        <h4>Parameters</h4>
        <table style="margin-left:-12px">
            <tr><td class="param">string <b>seed</b></td><td>The seed needs to be given by the remote party for decryption.</td></tr>
            <tr><td class="param">string <b>data</b></td><td>The encrypted string.</td></tr>
        </table>
        <h4>Return value</h4>
        <table style="margin-left:-12px">
            <tr><td class="param">string</td><td>The decrypted string.</td></tr>
        </table>
    </dd>
    <dd>
        <pre><code class="JS">conn.onmessage(function(msg) {
    var obj = JSON.parse(msg);
    if (obj.mt == "SomeMessage") {
        var secret = conn.decrypt(obj.seed, obj.encryptedText);
    }
});</code></pre>
    </dd>

    <a name="hash"><div class="fnhead" style="margin-top:5px">hash</div></a>
    <dd>
        Calculates a hash value using the shared secret of the connection and a random seed.
        <h4>Parameters</h4>
        <table style="margin-left:-12px">
            <tr><td class="param">string <b>seed</b></td><td>A seed value that shall be unique for each call.</td></tr>
            <tr><td class="param">string <b>data</b></td><td>The string to be hashed.</td></tr>
        </table>
        <h4>Return value</h4>
        <table style="margin-left:-12px">
            <tr><td class="param">string</td><td>The calculated hash value.</td></tr>
        </table>
    </dd>
    <dd>
        <pre><code class="JS">var seed = "some seed";
var text = "some secret text";
var hash = conn.hash(seed, secret);
conn.send(JSON.stringify({ mt: "SomeMessage", text: text, seed: seed, hash, hash }));</code></pre>
    </dd>

</body>
</html>
